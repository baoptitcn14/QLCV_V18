//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_QLCV_URL = new InjectionToken<string>('API_QLCV_URL');

@Injectable()
export class Qlcv_ABCServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_QLCV_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return Success
     */
    exportSearchCongViec(): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/ABC/ExportSearchCongViec";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportSearchCongViec(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportSearchCongViec(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileDto>;
        }));
    }

    protected processExportSearchCongViec(response: HttpResponseBase): Observable<FileDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FileDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class Qlcv_ApplicationServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_QLCV_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param tenant (optional) 
     * @return Success
     */
    removeAllCache(tenant: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/Application/RemoveAllCache?";
        if (tenant === null)
            throw new Error("The parameter 'tenant' cannot be null.");
        else if (tenant !== undefined)
            url_ += "tenant=" + encodeURIComponent("" + tenant) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveAllCache(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveAllCache(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processRemoveAllCache(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    resetCache(body: StringEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/Application/ResetCache";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processResetCache(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResetCache(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processResetCache(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class Qlcv_BanGiaoServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_QLCV_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getById(body: ShareKeyByIdDto | undefined): Observable<BanGiaoOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/BanGiao/GetById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BanGiaoOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BanGiaoOutputDto>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<BanGiaoOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BanGiaoOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    search(body: BanGiaoSearchInputDto | undefined): Observable<BanGiaoBasicOutputDto[]> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/BanGiao/Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BanGiaoBasicOutputDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BanGiaoBasicOutputDto[]>;
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<BanGiaoBasicOutputDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200.result)) {
                result200 = [] as any;
                for (let item of resultData200.result)
                    result200!.push(BanGiaoBasicOutputDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: BanGiaoInputDto | undefined): Observable<BanGiaoOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/BanGiao/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BanGiaoOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BanGiaoOutputDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<BanGiaoOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BanGiaoOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pheDuyetHoacTuChoi(body: ConfirmDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/BanGiao/PheDuyetHoacTuChoi";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPheDuyetHoacTuChoi(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPheDuyetHoacTuChoi(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processPheDuyetHoacTuChoi(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    huyBo(body: ConfirmDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/BanGiao/HuyBo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHuyBo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHuyBo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processHuyBo(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: BanGiaoInputDto | undefined): Observable<BanGiaoOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/BanGiao/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BanGiaoOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BanGiaoOutputDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<BanGiaoOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BanGiaoOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    delete(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/BanGiao/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class Qlcv_CategoryServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_QLCV_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getList(body: CategoryGuidGetDto | undefined): Observable<CategoryOutputDto[]> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/Category/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CategoryOutputDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CategoryOutputDto[]>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<CategoryOutputDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200.result)) {
                result200 = [] as any;
                for (let item of resultData200.result)
                    result200!.push(CategoryOutputDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    get(body: GuidEntityDto | undefined): Observable<CategoryOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/Category/Get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CategoryOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CategoryOutputDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<CategoryOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CategoryOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: CategoryInputDto | undefined): Observable<CategoryOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/Category/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CategoryOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CategoryOutputDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<CategoryOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CategoryOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: CategoryInputDto | undefined): Observable<CategoryOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/Category/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CategoryOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CategoryOutputDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<CategoryOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CategoryOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    delete(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/Category/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class Qlcv_CongViecServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_QLCV_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getAll(body: CongViecGuidGetDto | undefined): Observable<CongViecOutputDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/CongViec/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CongViecOutputDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CongViecOutputDtoPagedResultDto>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<CongViecOutputDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CongViecOutputDtoPagedResultDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getBasic(body: GuidEntityDto | undefined): Observable<CongViecOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/CongViec/GetBasic";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBasic(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBasic(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CongViecOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CongViecOutputDto>;
        }));
    }

    protected processGetBasic(response: HttpResponseBase): Observable<CongViecOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CongViecOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getById(body: ShareKeyByIdDto | undefined): Observable<CongViecOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/CongViec/GetById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CongViecOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CongViecOutputDto>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<CongViecOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CongViecOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getCongViecLog(body: GuidEntityDto | undefined): Observable<CongViecLog[]> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/CongViec/GetCongViecLog";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCongViecLog(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCongViecLog(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CongViecLog[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CongViecLog[]>;
        }));
    }

    protected processGetCongViecLog(response: HttpResponseBase): Observable<CongViecLog[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200.result)) {
                result200 = [] as any;
                for (let item of resultData200.result)
                    result200!.push(CongViecLog.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: CongViecInputDto | undefined): Observable<CongViecOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/CongViec/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CongViecOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CongViecOutputDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<CongViecOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CongViecOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: CongViecInputDto | undefined): Observable<CongViecOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/CongViec/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CongViecOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CongViecOutputDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<CongViecOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CongViecOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    delete(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/CongViec/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    huyBo(body: ConfirmDto | undefined): Observable<CongViecOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/CongViec/HuyBo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHuyBo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHuyBo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CongViecOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CongViecOutputDto>;
        }));
    }

    protected processHuyBo(response: HttpResponseBase): Observable<CongViecOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CongViecOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pheDuyetHoacTuChoiList(body: ConfirmDto[] | null | undefined): Observable<CongViecOutputDto[]> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/CongViec/PheDuyetHoacTuChoiList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPheDuyetHoacTuChoiList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPheDuyetHoacTuChoiList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CongViecOutputDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CongViecOutputDto[]>;
        }));
    }

    protected processPheDuyetHoacTuChoiList(response: HttpResponseBase): Observable<CongViecOutputDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200.result)) {
                result200 = [] as any;
                for (let item of resultData200.result)
                    result200!.push(CongViecOutputDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    baoCaoList(body: ShareKeyByBaoCaoCongiecDto | undefined): Observable<CongViecOutputDto[]> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/CongViec/BaoCaoList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBaoCaoList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBaoCaoList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CongViecOutputDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CongViecOutputDto[]>;
        }));
    }

    protected processBaoCaoList(response: HttpResponseBase): Observable<CongViecOutputDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200.result)) {
                result200 = [] as any;
                for (let item of resultData200.result)
                    result200!.push(CongViecOutputDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    tamDung(body: ConfirmDto | undefined): Observable<CongViecOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/CongViec/TamDung";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTamDung(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTamDung(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CongViecOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CongViecOutputDto>;
        }));
    }

    protected processTamDung(response: HttpResponseBase): Observable<CongViecOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CongViecOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    khoiDong(body: ConfirmDto | undefined): Observable<CongViecOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/CongViec/KhoiDong";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processKhoiDong(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processKhoiDong(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CongViecOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CongViecOutputDto>;
        }));
    }

    protected processKhoiDong(response: HttpResponseBase): Observable<CongViecOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CongViecOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    danhDauDaXem(input: string | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/CongViec/DanhDauDaXem?";
        if (input !== undefined && input !== null)
            url_ += "input=" + encodeURIComponent("" + input) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDanhDauDaXem(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDanhDauDaXem(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDanhDauDaXem(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class Qlcv_DashboardServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_QLCV_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getListById(body: ShareKeyByListIdDto | undefined): Observable<DataDashboardOutputDto[]> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/Dashboard/GetListById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DataDashboardOutputDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DataDashboardOutputDto[]>;
        }));
    }

    protected processGetListById(response: HttpResponseBase): Observable<DataDashboardOutputDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200.result)) {
                result200 = [] as any;
                for (let item of resultData200.result)
                    result200!.push(DataDashboardOutputDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getList(body: GetDashboardDto | undefined): Observable<ViecPhanLoaiDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/Dashboard/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ViecPhanLoaiDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ViecPhanLoaiDto>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<ViecPhanLoaiDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ViecPhanLoaiDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getListCongViecNhiemVu(body: ShareKeyDto | undefined): Observable<DataDashboardOutputDto[]> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/Dashboard/GetListCongViecNhiemVu";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListCongViecNhiemVu(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListCongViecNhiemVu(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DataDashboardOutputDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DataDashboardOutputDto[]>;
        }));
    }

    protected processGetListCongViecNhiemVu(response: HttpResponseBase): Observable<DataDashboardOutputDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200.result)) {
                result200 = [] as any;
                for (let item of resultData200.result)
                    result200!.push(DataDashboardOutputDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getListCongViecChild(body: GetDashboardDto | undefined): Observable<DataDashboardOutputDto[]> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/Dashboard/GetListCongViecChild";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetListCongViecChild(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetListCongViecChild(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DataDashboardOutputDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DataDashboardOutputDto[]>;
        }));
    }

    protected processGetListCongViecChild(response: HttpResponseBase): Observable<DataDashboardOutputDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200.result)) {
                result200 = [] as any;
                for (let item of resultData200.result)
                    result200!.push(DataDashboardOutputDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class Qlcv_QuyTrinhServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_QLCV_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param code (optional) 
     * @return Success
     */
    getByCode(code: string | null | undefined): Observable<QuyTrinhDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/QuyTrinh/GetByCode?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetByCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetByCode(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<QuyTrinhDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<QuyTrinhDto>;
        }));
    }

    protected processGetByCode(response: HttpResponseBase): Observable<QuyTrinhDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = QuyTrinhDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getById(body: ShareKeyByIdDto | undefined): Observable<QuyTrinhDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/QuyTrinh/GetById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<QuyTrinhDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<QuyTrinhDto>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<QuyTrinhDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = QuyTrinhDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    search(body: SearchQuyTrinhDto | undefined): Observable<QuyTrinhBasicDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/QuyTrinh/Search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<QuyTrinhBasicDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<QuyTrinhBasicDtoPagedResultDto>;
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<QuyTrinhBasicDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = QuyTrinhBasicDtoPagedResultDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param code (optional) 
     * @return Success
     */
    checkCode(code: string | null | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/QuyTrinh/CheckCode?";
        if (code !== undefined && code !== null)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheckCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckCode(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processCheckCode(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: QuyTrinhDto | undefined): Observable<QuyTrinhDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/QuyTrinh/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<QuyTrinhDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<QuyTrinhDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<QuyTrinhDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = QuyTrinhDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: QuyTrinhDto | undefined): Observable<QuyTrinhDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/QuyTrinh/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<QuyTrinhDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<QuyTrinhDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<QuyTrinhDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = QuyTrinhDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    delete(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/QuyTrinh/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pheDuyetHoacTuChoi(body: ConfirmDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/QuyTrinh/PheDuyetHoacTuChoi";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPheDuyetHoacTuChoi(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPheDuyetHoacTuChoi(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processPheDuyetHoacTuChoi(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    huyBo(body: ConfirmDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/QuyTrinh/HuyBo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHuyBo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHuyBo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processHuyBo(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class Qlcv_SearchServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_QLCV_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param input (optional) 
     * @return Success
     */
    searchCongViecBanGiaoByUser(input: string | null | undefined): Observable<SearchCongViecOutputDto[]> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/Search/SearchCongViecBanGiaoByUser?";
        if (input !== undefined && input !== null)
            url_ += "input=" + encodeURIComponent("" + input) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchCongViecBanGiaoByUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchCongViecBanGiaoByUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SearchCongViecOutputDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SearchCongViecOutputDto[]>;
        }));
    }

    protected processSearchCongViecBanGiaoByUser(response: HttpResponseBase): Observable<SearchCongViecOutputDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200.result)) {
                result200 = [] as any;
                for (let item of resultData200.result)
                    result200!.push(SearchCongViecOutputDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    searchCongViecParent(body: StringEntityDto | undefined): Observable<SearchCongViecOutputDto[]> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/Search/SearchCongViecParent";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchCongViecParent(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchCongViecParent(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SearchCongViecOutputDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SearchCongViecOutputDto[]>;
        }));
    }

    protected processSearchCongViecParent(response: HttpResponseBase): Observable<SearchCongViecOutputDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200.result)) {
                result200 = [] as any;
                for (let item of resultData200.result)
                    result200!.push(SearchCongViecOutputDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    searchCongViec(body: SearchInputDto | undefined): Observable<SearchCongViecOutputDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/Search/SearchCongViec";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchCongViec(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchCongViec(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SearchCongViecOutputDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SearchCongViecOutputDtoPagedResultDto>;
        }));
    }

    protected processSearchCongViec(response: HttpResponseBase): Observable<SearchCongViecOutputDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SearchCongViecOutputDtoPagedResultDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    searchThongBao(body: SearchInputDto | undefined): Observable<SearchThongBaoOutputDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/Search/SearchThongBao";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearchThongBao(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearchThongBao(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SearchThongBaoOutputDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SearchThongBaoOutputDtoPagedResultDto>;
        }));
    }

    protected processSearchThongBao(response: HttpResponseBase): Observable<SearchThongBaoOutputDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SearchThongBaoOutputDtoPagedResultDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    exportSearchCongViec(body: SearchInputDto | undefined): Observable<FileDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/Search/ExportSearchCongViec";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportSearchCongViec(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportSearchCongViec(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileDto>;
        }));
    }

    protected processExportSearchCongViec(response: HttpResponseBase): Observable<FileDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FileDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class Qlcv_SettingServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_QLCV_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return Success
     */
    getAllSettingForUser(): Observable<SettingDto[]> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/Setting/GetAllSettingForUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllSettingForUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllSettingForUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SettingDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SettingDto[]>;
        }));
    }

    protected processGetAllSettingForUser(response: HttpResponseBase): Observable<SettingDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200.result)) {
                result200 = [] as any;
                for (let item of resultData200.result)
                    result200!.push(SettingDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param name (optional) 
     * @return Success
     */
    getSystemTenantByName(name: string | null | undefined): Observable<SettingDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/Setting/GetSystemTenantByName?";
        if (name !== undefined && name !== null)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSystemTenantByName(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSystemTenantByName(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SettingDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SettingDto>;
        }));
    }

    protected processGetSystemTenantByName(response: HttpResponseBase): Observable<SettingDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SettingDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param name (optional) 
     * @return Success
     */
    getByName(name: string | null | undefined): Observable<SettingDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/Setting/GetByName?";
        if (name !== undefined && name !== null)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetByName(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetByName(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SettingDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SettingDto>;
        }));
    }

    protected processGetByName(response: HttpResponseBase): Observable<SettingDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SettingDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param name (optional) 
     * @return Success
     */
    getByNameAndNotCurrentUser(name: string | null | undefined): Observable<SettingDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/Setting/GetByNameAndNotCurrentUser?";
        if (name !== undefined && name !== null)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetByNameAndNotCurrentUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetByNameAndNotCurrentUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SettingDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SettingDto>;
        }));
    }

    protected processGetByNameAndNotCurrentUser(response: HttpResponseBase): Observable<SettingDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SettingDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: SettingDto | undefined): Observable<SettingDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/Setting/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SettingDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SettingDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<SettingDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SettingDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: SettingDto | undefined): Observable<SettingDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/Setting/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SettingDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SettingDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<SettingDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SettingDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateListSettingForSystem(body: SettingDto[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/Setting/UpdateListSettingForSystem";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateListSettingForSystem(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateListSettingForSystem(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateListSettingForSystem(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateListSettingForUser(body: SettingDto[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/Setting/UpdateListSettingForUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateListSettingForUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateListSettingForUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateListSettingForUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    updateSettingTenant(body: SettingDto[] | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/Setting/UpdateSettingTenant";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateSettingTenant(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateSettingTenant(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUpdateSettingTenant(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    delete(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/Setting/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class Qlcv_TemplateServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_QLCV_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getList(body: TemplateGuidGetDto | undefined): Observable<TemplateOutputDto[]> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/Template/GetList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TemplateOutputDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TemplateOutputDto[]>;
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<TemplateOutputDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200.result)) {
                result200 = [] as any;
                for (let item of resultData200.result)
                    result200!.push(TemplateOutputDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    get(body: GuidEntityDto | undefined): Observable<TemplateOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/Template/Get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TemplateOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TemplateOutputDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<TemplateOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TemplateOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: TemplateInputDto | undefined): Observable<TemplateOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/Template/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TemplateOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TemplateOutputDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<TemplateOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TemplateOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createList(body: TemplateInputDto[] | null | undefined): Observable<TemplateOutputDto[]> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/Template/CreateList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TemplateOutputDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TemplateOutputDto[]>;
        }));
    }

    protected processCreateList(response: HttpResponseBase): Observable<TemplateOutputDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200.result)) {
                result200 = [] as any;
                for (let item of resultData200.result)
                    result200!.push(TemplateOutputDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: TemplateInputDto | undefined): Observable<TemplateOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/Template/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TemplateOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TemplateOutputDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<TemplateOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TemplateOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    delete(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/Template/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class Qlcv_TemplateCVDKServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_QLCV_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getAll(body: TemplateCVDKGuidGetDto | undefined): Observable<TemplateCVDKOutputDtoPagedResultDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/TemplateCVDK/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TemplateCVDKOutputDtoPagedResultDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TemplateCVDKOutputDtoPagedResultDto>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<TemplateCVDKOutputDtoPagedResultDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TemplateCVDKOutputDtoPagedResultDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    get(body: ShareKeyByIdDto | undefined): Observable<TemplateCVDKOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/TemplateCVDK/Get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TemplateCVDKOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TemplateCVDKOutputDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<TemplateCVDKOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TemplateCVDKOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: TemplateCVDKInputDto | undefined): Observable<TemplateCVDKOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/TemplateCVDK/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TemplateCVDKOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TemplateCVDKOutputDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<TemplateCVDKOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TemplateCVDKOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: TemplateCVDKInputDto | undefined): Observable<TemplateCVDKOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/TemplateCVDK/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TemplateCVDKOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TemplateCVDKOutputDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<TemplateCVDKOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TemplateCVDKOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    delete(body: DeleteTemplateCVDKDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/TemplateCVDK/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pheDuyetHoacTuChoiList(body: ConfirmDto[] | null | undefined): Observable<TemplateCVDKOutputDto[]> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/TemplateCVDK/PheDuyetHoacTuChoiList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPheDuyetHoacTuChoiList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPheDuyetHoacTuChoiList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TemplateCVDKOutputDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TemplateCVDKOutputDto[]>;
        }));
    }

    protected processPheDuyetHoacTuChoiList(response: HttpResponseBase): Observable<TemplateCVDKOutputDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200.result)) {
                result200 = [] as any;
                for (let item of resultData200.result)
                    result200!.push(TemplateCVDKOutputDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class Qlcv_ThongBaoServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_QLCV_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getBasic(body: GuidEntityDto | undefined): Observable<ThongBaoOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/ThongBao/GetBasic";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBasic(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBasic(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ThongBaoOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ThongBaoOutputDto>;
        }));
    }

    protected processGetBasic(response: HttpResponseBase): Observable<ThongBaoOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ThongBaoOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getById(body: ShareKeyByIdDto | undefined): Observable<ThongBaoOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/read/ThongBao/GetById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ThongBaoOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ThongBaoOutputDto>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<ThongBaoOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ThongBaoOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: ThongBaoInputDto | undefined): Observable<ThongBaoOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/ThongBao/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ThongBaoOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ThongBaoOutputDto>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<ThongBaoOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ThongBaoOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    update(body: ThongBaoInputDto | undefined): Observable<ThongBaoOutputDto> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/ThongBao/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ThongBaoOutputDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ThongBaoOutputDto>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<ThongBaoOutputDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ThongBaoOutputDto.fromJS(resultData200.result);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    pheDuyetHoacTuChoi(body: ConfirmDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/ThongBao/PheDuyetHoacTuChoi";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPheDuyetHoacTuChoi(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPheDuyetHoacTuChoi(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processPheDuyetHoacTuChoi(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    ketThuc(body: ConfirmDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/ThongBao/KetThuc";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processKetThuc(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processKetThuc(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processKetThuc(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    anThongBao(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/ThongBao/AnThongBao";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAnThongBao(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAnThongBao(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAnThongBao(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    huyBo(body: ConfirmDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/ThongBao/HuyBo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHuyBo(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHuyBo(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processHuyBo(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    delete(body: GuidEntityDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/QLCV/write/ThongBao/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json-patch+json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class FileDto implements IFileDto {
    tenantId?: number | undefined;
    name?: string | undefined;
    type?: string | undefined;
    data?: string | undefined;
    fileUrl?: string | undefined;
    thumbnail?: boolean | undefined;
    reference?: string | undefined;
    id?: string | undefined;

    constructor(data?: IFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.data = _data["data"];
            this.fileUrl = _data["fileUrl"];
            this.thumbnail = _data["thumbnail"];
            this.reference = _data["reference"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): FileDto {
        data = typeof data === 'object' ? data : {};
        let result = new FileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["type"] = this.type;
        data["data"] = this.data;
        data["fileUrl"] = this.fileUrl;
        data["thumbnail"] = this.thumbnail;
        data["reference"] = this.reference;
        data["id"] = this.id;
        return data;
    }
}

export interface IFileDto {
    tenantId?: number | undefined;
    name?: string | undefined;
    type?: string | undefined;
    data?: string | undefined;
    fileUrl?: string | undefined;
    thumbnail?: boolean | undefined;
    reference?: string | undefined;
    id?: string | undefined;
}

export class StringEntityDto implements IStringEntityDto {
    id?: string | undefined;

    constructor(data?: IStringEntityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): StringEntityDto {
        data = typeof data === 'object' ? data : {};
        let result = new StringEntityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IStringEntityDto {
    id?: string | undefined;
}

export class ShareKeyDto implements IShareKeyDto {
    fullName?: string | undefined;
    emailAddress?: string | undefined;
    userId?: number | undefined;
    currentUserId?: number | undefined;
    code?: string | undefined;

    constructor(data?: IShareKeyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fullName = _data["fullName"];
            this.emailAddress = _data["emailAddress"];
            this.userId = _data["userId"];
            this.currentUserId = _data["currentUserId"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): ShareKeyDto {
        data = typeof data === 'object' ? data : {};
        let result = new ShareKeyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullName"] = this.fullName;
        data["emailAddress"] = this.emailAddress;
        data["userId"] = this.userId;
        data["currentUserId"] = this.currentUserId;
        data["code"] = this.code;
        return data;
    }
}

export interface IShareKeyDto {
    fullName?: string | undefined;
    emailAddress?: string | undefined;
    userId?: number | undefined;
    currentUserId?: number | undefined;
    code?: string | undefined;
}

export class ShareKeyByIdDto implements IShareKeyByIdDto {
    id?: string;
    shareKey?: ShareKeyDto;

    constructor(data?: IShareKeyByIdDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.shareKey = _data["shareKey"] ? ShareKeyDto.fromJS(_data["shareKey"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ShareKeyByIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new ShareKeyByIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["shareKey"] = this.shareKey ? this.shareKey.toJSON() : <any>undefined;
        return data;
    }
}

export interface IShareKeyByIdDto {
    id?: string;
    shareKey?: ShareKeyDto;
}

export class InfoDetailUserDto implements IInfoDetailUserDto {
    emailAddress?: string | undefined;
    fullName?: string | undefined;
    orgName?: string | undefined;
    titleName?: string | undefined;
    action?: string | undefined;
    message?: string | undefined;
    creationTime?: number | undefined;
    userId?: number | undefined;
    orgId?: string | undefined;
    titleId?: string | undefined;
    isNew?: boolean | undefined;
    isRelate?: boolean | undefined;
    status?: string | undefined;

    constructor(data?: IInfoDetailUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emailAddress = _data["emailAddress"];
            this.fullName = _data["fullName"];
            this.orgName = _data["orgName"];
            this.titleName = _data["titleName"];
            this.action = _data["action"];
            this.message = _data["message"];
            this.creationTime = _data["creationTime"];
            this.userId = _data["userId"];
            this.orgId = _data["orgId"];
            this.titleId = _data["titleId"];
            this.isNew = _data["isNew"];
            this.isRelate = _data["isRelate"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): InfoDetailUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new InfoDetailUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        data["fullName"] = this.fullName;
        data["orgName"] = this.orgName;
        data["titleName"] = this.titleName;
        data["action"] = this.action;
        data["message"] = this.message;
        data["creationTime"] = this.creationTime;
        data["userId"] = this.userId;
        data["orgId"] = this.orgId;
        data["titleId"] = this.titleId;
        data["isNew"] = this.isNew;
        data["isRelate"] = this.isRelate;
        data["status"] = this.status;
        return data;
    }
}

export interface IInfoDetailUserDto {
    emailAddress?: string | undefined;
    fullName?: string | undefined;
    orgName?: string | undefined;
    titleName?: string | undefined;
    action?: string | undefined;
    message?: string | undefined;
    creationTime?: number | undefined;
    userId?: number | undefined;
    orgId?: string | undefined;
    titleId?: string | undefined;
    isNew?: boolean | undefined;
    isRelate?: boolean | undefined;
    status?: string | undefined;
}

export class CongViecBanGiaoDto implements ICongViecBanGiaoDto {
    title?: string | undefined;
    xuLy!: InfoDetailUserDto;
    duyet!: InfoDetailUserDto;
    giamSat?: InfoDetailUserDto;
    id?: string;

    constructor(data?: ICongViecBanGiaoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.xuLy = new InfoDetailUserDto();
            this.duyet = new InfoDetailUserDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.xuLy = _data["xuLy"] ? InfoDetailUserDto.fromJS(_data["xuLy"]) : new InfoDetailUserDto();
            this.duyet = _data["duyet"] ? InfoDetailUserDto.fromJS(_data["duyet"]) : new InfoDetailUserDto();
            this.giamSat = _data["giamSat"] ? InfoDetailUserDto.fromJS(_data["giamSat"]) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CongViecBanGiaoDto {
        data = typeof data === 'object' ? data : {};
        let result = new CongViecBanGiaoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["xuLy"] = this.xuLy ? this.xuLy.toJSON() : <any>undefined;
        data["duyet"] = this.duyet ? this.duyet.toJSON() : <any>undefined;
        data["giamSat"] = this.giamSat ? this.giamSat.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface ICongViecBanGiaoDto {
    title?: string | undefined;
    xuLy: InfoDetailUserDto;
    duyet: InfoDetailUserDto;
    giamSat?: InfoDetailUserDto;
    id?: string;
}

export class DataCongViecDto implements IDataCongViecDto {
    listCongViec?: CongViecBanGiaoDto[] | undefined;
    listCongViecDinhKy?: CongViecBanGiaoDto[] | undefined;

    constructor(data?: IDataCongViecDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["listCongViec"])) {
                this.listCongViec = [] as any;
                for (let item of _data["listCongViec"])
                    this.listCongViec!.push(CongViecBanGiaoDto.fromJS(item));
            }
            if (Array.isArray(_data["listCongViecDinhKy"])) {
                this.listCongViecDinhKy = [] as any;
                for (let item of _data["listCongViecDinhKy"])
                    this.listCongViecDinhKy!.push(CongViecBanGiaoDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DataCongViecDto {
        data = typeof data === 'object' ? data : {};
        let result = new DataCongViecDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.listCongViec)) {
            data["listCongViec"] = [];
            for (let item of this.listCongViec)
                data["listCongViec"].push(item.toJSON());
        }
        if (Array.isArray(this.listCongViecDinhKy)) {
            data["listCongViecDinhKy"] = [];
            for (let item of this.listCongViecDinhKy)
                data["listCongViecDinhKy"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDataCongViecDto {
    listCongViec?: CongViecBanGiaoDto[] | undefined;
    listCongViecDinhKy?: CongViecBanGiaoDto[] | undefined;
}

export class BanGiaoOutputDto implements IBanGiaoOutputDto {
    listPermission?: string[] | undefined;
    shareKey?: ShareKeyDto;
    title!: string;
    banGiao!: InfoDetailUserDto;
    boPhanTao!: InfoDetailUserDto;
    duyet!: InfoDetailUserDto;
    boPhanTiepNhan!: string;
    content?: string | undefined;
    dataCongViec?: DataCongViecDto;
    parentId?: string | undefined;
    index?: number;
    order?: number;
    groupCode?: string | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;

    constructor(data?: IBanGiaoOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.banGiao = new InfoDetailUserDto();
            this.boPhanTao = new InfoDetailUserDto();
            this.duyet = new InfoDetailUserDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["listPermission"])) {
                this.listPermission = [] as any;
                for (let item of _data["listPermission"])
                    this.listPermission!.push(item);
            }
            this.shareKey = _data["shareKey"] ? ShareKeyDto.fromJS(_data["shareKey"]) : <any>undefined;
            this.title = _data["title"];
            this.banGiao = _data["banGiao"] ? InfoDetailUserDto.fromJS(_data["banGiao"]) : new InfoDetailUserDto();
            this.boPhanTao = _data["boPhanTao"] ? InfoDetailUserDto.fromJS(_data["boPhanTao"]) : new InfoDetailUserDto();
            this.duyet = _data["duyet"] ? InfoDetailUserDto.fromJS(_data["duyet"]) : new InfoDetailUserDto();
            this.boPhanTiepNhan = _data["boPhanTiepNhan"];
            this.content = _data["content"];
            this.dataCongViec = _data["dataCongViec"] ? DataCongViecDto.fromJS(_data["dataCongViec"]) : <any>undefined;
            this.parentId = _data["parentId"];
            this.index = _data["index"];
            this.order = _data["order"];
            this.groupCode = _data["groupCode"];
            this.value1 = _data["value1"];
            this.value2 = _data["value2"];
            this.value3 = _data["value3"];
            this.value4 = _data["value4"];
            this.value5 = _data["value5"];
            this.value6 = _data["value6"];
            this.value7 = _data["value7"];
            this.value8 = _data["value8"];
            this.value9 = _data["value9"];
            this.value10 = _data["value10"];
            this.number1 = _data["number1"];
            this.number2 = _data["number2"];
            this.number3 = _data["number3"];
            this.number4 = _data["number4"];
            this.number5 = _data["number5"];
            this.number6 = _data["number6"];
            this.number7 = _data["number7"];
            this.number8 = _data["number8"];
            this.number9 = _data["number9"];
            this.number10 = _data["number10"];
            this.bool1 = _data["bool1"];
            this.bool2 = _data["bool2"];
            this.bool3 = _data["bool3"];
            this.bool4 = _data["bool4"];
            this.bool5 = _data["bool5"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.codeData = _data["codeData"];
            this.valueData = _data["valueData"];
            this.category = _data["category"];
            this.permissions = _data["permissions"];
            this.language = _data["language"];
            this.tenantId = _data["tenantId"];
            this.status = _data["status"];
            this.hideValue = _data["hideValue"];
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): BanGiaoOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new BanGiaoOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.listPermission)) {
            data["listPermission"] = [];
            for (let item of this.listPermission)
                data["listPermission"].push(item);
        }
        data["shareKey"] = this.shareKey ? this.shareKey.toJSON() : <any>undefined;
        data["title"] = this.title;
        data["banGiao"] = this.banGiao ? this.banGiao.toJSON() : <any>undefined;
        data["boPhanTao"] = this.boPhanTao ? this.boPhanTao.toJSON() : <any>undefined;
        data["duyet"] = this.duyet ? this.duyet.toJSON() : <any>undefined;
        data["boPhanTiepNhan"] = this.boPhanTiepNhan;
        data["content"] = this.content;
        data["dataCongViec"] = this.dataCongViec ? this.dataCongViec.toJSON() : <any>undefined;
        data["parentId"] = this.parentId;
        data["index"] = this.index;
        data["order"] = this.order;
        data["groupCode"] = this.groupCode;
        data["value1"] = this.value1;
        data["value2"] = this.value2;
        data["value3"] = this.value3;
        data["value4"] = this.value4;
        data["value5"] = this.value5;
        data["value6"] = this.value6;
        data["value7"] = this.value7;
        data["value8"] = this.value8;
        data["value9"] = this.value9;
        data["value10"] = this.value10;
        data["number1"] = this.number1;
        data["number2"] = this.number2;
        data["number3"] = this.number3;
        data["number4"] = this.number4;
        data["number5"] = this.number5;
        data["number6"] = this.number6;
        data["number7"] = this.number7;
        data["number8"] = this.number8;
        data["number9"] = this.number9;
        data["number10"] = this.number10;
        data["bool1"] = this.bool1;
        data["bool2"] = this.bool2;
        data["bool3"] = this.bool3;
        data["bool4"] = this.bool4;
        data["bool5"] = this.bool5;
        data["name"] = this.name;
        data["code"] = this.code;
        data["codeData"] = this.codeData;
        data["valueData"] = this.valueData;
        data["category"] = this.category;
        data["permissions"] = this.permissions;
        data["language"] = this.language;
        data["tenantId"] = this.tenantId;
        data["status"] = this.status;
        data["hideValue"] = this.hideValue;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IBanGiaoOutputDto {
    listPermission?: string[] | undefined;
    shareKey?: ShareKeyDto;
    title: string;
    banGiao: InfoDetailUserDto;
    boPhanTao: InfoDetailUserDto;
    duyet: InfoDetailUserDto;
    boPhanTiepNhan: string;
    content?: string | undefined;
    dataCongViec?: DataCongViecDto;
    parentId?: string | undefined;
    index?: number;
    order?: number;
    groupCode?: string | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;
}

export class BanGiaoSearchInputDto implements IBanGiaoSearchInputDto {
    title?: string | undefined;
    status?: string | undefined;
    listTao?: InfoDetailUserDto[] | undefined;
    listBanGiao?: InfoDetailUserDto[] | undefined;
    listDuyet?: InfoDetailUserDto[] | undefined;
    boPhanTiepNhan?: string | undefined;
    shareKey?: ShareKeyDto;

    constructor(data?: IBanGiaoSearchInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.status = _data["status"];
            if (Array.isArray(_data["listTao"])) {
                this.listTao = [] as any;
                for (let item of _data["listTao"])
                    this.listTao!.push(InfoDetailUserDto.fromJS(item));
            }
            if (Array.isArray(_data["listBanGiao"])) {
                this.listBanGiao = [] as any;
                for (let item of _data["listBanGiao"])
                    this.listBanGiao!.push(InfoDetailUserDto.fromJS(item));
            }
            if (Array.isArray(_data["listDuyet"])) {
                this.listDuyet = [] as any;
                for (let item of _data["listDuyet"])
                    this.listDuyet!.push(InfoDetailUserDto.fromJS(item));
            }
            this.boPhanTiepNhan = _data["boPhanTiepNhan"];
            this.shareKey = _data["shareKey"] ? ShareKeyDto.fromJS(_data["shareKey"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BanGiaoSearchInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new BanGiaoSearchInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["status"] = this.status;
        if (Array.isArray(this.listTao)) {
            data["listTao"] = [];
            for (let item of this.listTao)
                data["listTao"].push(item.toJSON());
        }
        if (Array.isArray(this.listBanGiao)) {
            data["listBanGiao"] = [];
            for (let item of this.listBanGiao)
                data["listBanGiao"].push(item.toJSON());
        }
        if (Array.isArray(this.listDuyet)) {
            data["listDuyet"] = [];
            for (let item of this.listDuyet)
                data["listDuyet"].push(item.toJSON());
        }
        data["boPhanTiepNhan"] = this.boPhanTiepNhan;
        data["shareKey"] = this.shareKey ? this.shareKey.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBanGiaoSearchInputDto {
    title?: string | undefined;
    status?: string | undefined;
    listTao?: InfoDetailUserDto[] | undefined;
    listBanGiao?: InfoDetailUserDto[] | undefined;
    listDuyet?: InfoDetailUserDto[] | undefined;
    boPhanTiepNhan?: string | undefined;
    shareKey?: ShareKeyDto;
}

export class BanGiaoBasicOutputDto implements IBanGiaoBasicOutputDto {
    title?: string | undefined;
    banGiao?: InfoDetailUserDto;
    boPhanTao?: InfoDetailUserDto;
    duyet?: InfoDetailUserDto;
    status?: string | undefined;
    boPhanTiepNhanName?: string | undefined;
    id?: string;

    constructor(data?: IBanGiaoBasicOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.banGiao = _data["banGiao"] ? InfoDetailUserDto.fromJS(_data["banGiao"]) : <any>undefined;
            this.boPhanTao = _data["boPhanTao"] ? InfoDetailUserDto.fromJS(_data["boPhanTao"]) : <any>undefined;
            this.duyet = _data["duyet"] ? InfoDetailUserDto.fromJS(_data["duyet"]) : <any>undefined;
            this.status = _data["status"];
            this.boPhanTiepNhanName = _data["boPhanTiepNhanName"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): BanGiaoBasicOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new BanGiaoBasicOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["banGiao"] = this.banGiao ? this.banGiao.toJSON() : <any>undefined;
        data["boPhanTao"] = this.boPhanTao ? this.boPhanTao.toJSON() : <any>undefined;
        data["duyet"] = this.duyet ? this.duyet.toJSON() : <any>undefined;
        data["status"] = this.status;
        data["boPhanTiepNhanName"] = this.boPhanTiepNhanName;
        data["id"] = this.id;
        return data;
    }
}

export interface IBanGiaoBasicOutputDto {
    title?: string | undefined;
    banGiao?: InfoDetailUserDto;
    boPhanTao?: InfoDetailUserDto;
    duyet?: InfoDetailUserDto;
    status?: string | undefined;
    boPhanTiepNhanName?: string | undefined;
    id?: string;
}

export class BanGiaoInputDto implements IBanGiaoInputDto {
    shareKey?: ShareKeyDto;
    title!: string;
    banGiao!: InfoDetailUserDto;
    boPhanTao!: InfoDetailUserDto;
    duyet!: InfoDetailUserDto;
    boPhanTiepNhan!: string;
    content?: string | undefined;
    dataCongViec?: DataCongViecDto;
    parentId?: string | undefined;
    index?: number;
    order?: number;
    groupCode?: string | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;

    constructor(data?: IBanGiaoInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.banGiao = new InfoDetailUserDto();
            this.boPhanTao = new InfoDetailUserDto();
            this.duyet = new InfoDetailUserDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shareKey = _data["shareKey"] ? ShareKeyDto.fromJS(_data["shareKey"]) : <any>undefined;
            this.title = _data["title"];
            this.banGiao = _data["banGiao"] ? InfoDetailUserDto.fromJS(_data["banGiao"]) : new InfoDetailUserDto();
            this.boPhanTao = _data["boPhanTao"] ? InfoDetailUserDto.fromJS(_data["boPhanTao"]) : new InfoDetailUserDto();
            this.duyet = _data["duyet"] ? InfoDetailUserDto.fromJS(_data["duyet"]) : new InfoDetailUserDto();
            this.boPhanTiepNhan = _data["boPhanTiepNhan"];
            this.content = _data["content"];
            this.dataCongViec = _data["dataCongViec"] ? DataCongViecDto.fromJS(_data["dataCongViec"]) : <any>undefined;
            this.parentId = _data["parentId"];
            this.index = _data["index"];
            this.order = _data["order"];
            this.groupCode = _data["groupCode"];
            this.value1 = _data["value1"];
            this.value2 = _data["value2"];
            this.value3 = _data["value3"];
            this.value4 = _data["value4"];
            this.value5 = _data["value5"];
            this.value6 = _data["value6"];
            this.value7 = _data["value7"];
            this.value8 = _data["value8"];
            this.value9 = _data["value9"];
            this.value10 = _data["value10"];
            this.number1 = _data["number1"];
            this.number2 = _data["number2"];
            this.number3 = _data["number3"];
            this.number4 = _data["number4"];
            this.number5 = _data["number5"];
            this.number6 = _data["number6"];
            this.number7 = _data["number7"];
            this.number8 = _data["number8"];
            this.number9 = _data["number9"];
            this.number10 = _data["number10"];
            this.bool1 = _data["bool1"];
            this.bool2 = _data["bool2"];
            this.bool3 = _data["bool3"];
            this.bool4 = _data["bool4"];
            this.bool5 = _data["bool5"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.codeData = _data["codeData"];
            this.valueData = _data["valueData"];
            this.category = _data["category"];
            this.permissions = _data["permissions"];
            this.language = _data["language"];
            this.tenantId = _data["tenantId"];
            this.status = _data["status"];
            this.hideValue = _data["hideValue"];
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): BanGiaoInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new BanGiaoInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shareKey"] = this.shareKey ? this.shareKey.toJSON() : <any>undefined;
        data["title"] = this.title;
        data["banGiao"] = this.banGiao ? this.banGiao.toJSON() : <any>undefined;
        data["boPhanTao"] = this.boPhanTao ? this.boPhanTao.toJSON() : <any>undefined;
        data["duyet"] = this.duyet ? this.duyet.toJSON() : <any>undefined;
        data["boPhanTiepNhan"] = this.boPhanTiepNhan;
        data["content"] = this.content;
        data["dataCongViec"] = this.dataCongViec ? this.dataCongViec.toJSON() : <any>undefined;
        data["parentId"] = this.parentId;
        data["index"] = this.index;
        data["order"] = this.order;
        data["groupCode"] = this.groupCode;
        data["value1"] = this.value1;
        data["value2"] = this.value2;
        data["value3"] = this.value3;
        data["value4"] = this.value4;
        data["value5"] = this.value5;
        data["value6"] = this.value6;
        data["value7"] = this.value7;
        data["value8"] = this.value8;
        data["value9"] = this.value9;
        data["value10"] = this.value10;
        data["number1"] = this.number1;
        data["number2"] = this.number2;
        data["number3"] = this.number3;
        data["number4"] = this.number4;
        data["number5"] = this.number5;
        data["number6"] = this.number6;
        data["number7"] = this.number7;
        data["number8"] = this.number8;
        data["number9"] = this.number9;
        data["number10"] = this.number10;
        data["bool1"] = this.bool1;
        data["bool2"] = this.bool2;
        data["bool3"] = this.bool3;
        data["bool4"] = this.bool4;
        data["bool5"] = this.bool5;
        data["name"] = this.name;
        data["code"] = this.code;
        data["codeData"] = this.codeData;
        data["valueData"] = this.valueData;
        data["category"] = this.category;
        data["permissions"] = this.permissions;
        data["language"] = this.language;
        data["tenantId"] = this.tenantId;
        data["status"] = this.status;
        data["hideValue"] = this.hideValue;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IBanGiaoInputDto {
    shareKey?: ShareKeyDto;
    title: string;
    banGiao: InfoDetailUserDto;
    boPhanTao: InfoDetailUserDto;
    duyet: InfoDetailUserDto;
    boPhanTiepNhan: string;
    content?: string | undefined;
    dataCongViec?: DataCongViecDto;
    parentId?: string | undefined;
    index?: number;
    order?: number;
    groupCode?: string | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;
}

export class ConfirmDto implements IConfirmDto {
    action?: string | undefined;
    comment?: string | undefined;
    xuLy?: InfoDetailUserDto;
    shareKey?: ShareKeyDto;
    id?: string;

    constructor(data?: IConfirmDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.action = _data["action"];
            this.comment = _data["comment"];
            this.xuLy = _data["xuLy"] ? InfoDetailUserDto.fromJS(_data["xuLy"]) : <any>undefined;
            this.shareKey = _data["shareKey"] ? ShareKeyDto.fromJS(_data["shareKey"]) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ConfirmDto {
        data = typeof data === 'object' ? data : {};
        let result = new ConfirmDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["action"] = this.action;
        data["comment"] = this.comment;
        data["xuLy"] = this.xuLy ? this.xuLy.toJSON() : <any>undefined;
        data["shareKey"] = this.shareKey ? this.shareKey.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IConfirmDto {
    action?: string | undefined;
    comment?: string | undefined;
    xuLy?: InfoDetailUserDto;
    shareKey?: ShareKeyDto;
    id?: string;
}

export class GuidEntityDto implements IGuidEntityDto {
    id?: string;

    constructor(data?: IGuidEntityDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): GuidEntityDto {
        data = typeof data === 'object' ? data : {};
        let result = new GuidEntityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IGuidEntityDto {
    id?: string;
}

export enum OperationCriteria {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _10 = 10,
}

export class CriteriaRequestDto implements ICriteriaRequestDto {
    propertyName?: string | undefined;
    operation?: OperationCriteria;
    value?: string | undefined;

    constructor(data?: ICriteriaRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.propertyName = _data["propertyName"];
            this.operation = _data["operation"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): CriteriaRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new CriteriaRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyName"] = this.propertyName;
        data["operation"] = this.operation;
        data["value"] = this.value;
        return data;
    }
}

export interface ICriteriaRequestDto {
    propertyName?: string | undefined;
    operation?: OperationCriteria;
    value?: string | undefined;
}

export class CategoryGuidGetDto implements ICategoryGuidGetDto {
    tenantId?: number | undefined;
    userId?: number | undefined;
    id?: string;
    language?: string | undefined;
    option?: string | undefined;
    search?: string | undefined;
    status?: string | undefined;
    from?: Date | undefined;
    to?: Date | undefined;
    sValue?: string[] | undefined;
    lValue?: number[] | undefined;
    gValue?: string[] | undefined;
    dValue?: number[] | undefined;
    tValue?: Date[] | undefined;
    criterias?: CriteriaRequestDto[] | undefined;
    sorting?: string | undefined;
    skipCount?: number;
    maxResultCount?: number;

    constructor(data?: ICategoryGuidGetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.userId = _data["userId"];
            this.id = _data["id"];
            this.language = _data["language"];
            this.option = _data["option"];
            this.search = _data["search"];
            this.status = _data["status"];
            this.from = _data["from"] ? new Date(_data["from"].toString()) : <any>undefined;
            this.to = _data["to"] ? new Date(_data["to"].toString()) : <any>undefined;
            if (Array.isArray(_data["sValue"])) {
                this.sValue = [] as any;
                for (let item of _data["sValue"])
                    this.sValue!.push(item);
            }
            if (Array.isArray(_data["lValue"])) {
                this.lValue = [] as any;
                for (let item of _data["lValue"])
                    this.lValue!.push(item);
            }
            if (Array.isArray(_data["gValue"])) {
                this.gValue = [] as any;
                for (let item of _data["gValue"])
                    this.gValue!.push(item);
            }
            if (Array.isArray(_data["dValue"])) {
                this.dValue = [] as any;
                for (let item of _data["dValue"])
                    this.dValue!.push(item);
            }
            if (Array.isArray(_data["tValue"])) {
                this.tValue = [] as any;
                for (let item of _data["tValue"])
                    this.tValue!.push(new Date(item));
            }
            if (Array.isArray(_data["criterias"])) {
                this.criterias = [] as any;
                for (let item of _data["criterias"])
                    this.criterias!.push(CriteriaRequestDto.fromJS(item));
            }
            this.sorting = _data["sorting"];
            this.skipCount = _data["skipCount"];
            this.maxResultCount = _data["maxResultCount"];
        }
    }

    static fromJS(data: any): CategoryGuidGetDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryGuidGetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["id"] = this.id;
        data["language"] = this.language;
        data["option"] = this.option;
        data["search"] = this.search;
        data["status"] = this.status;
        data["from"] = this.from ? this.from.toISOString() : <any>undefined;
        data["to"] = this.to ? this.to.toISOString() : <any>undefined;
        if (Array.isArray(this.sValue)) {
            data["sValue"] = [];
            for (let item of this.sValue)
                data["sValue"].push(item);
        }
        if (Array.isArray(this.lValue)) {
            data["lValue"] = [];
            for (let item of this.lValue)
                data["lValue"].push(item);
        }
        if (Array.isArray(this.gValue)) {
            data["gValue"] = [];
            for (let item of this.gValue)
                data["gValue"].push(item);
        }
        if (Array.isArray(this.dValue)) {
            data["dValue"] = [];
            for (let item of this.dValue)
                data["dValue"].push(item);
        }
        if (Array.isArray(this.tValue)) {
            data["tValue"] = [];
            for (let item of this.tValue)
                data["tValue"].push(item.toISOString());
        }
        if (Array.isArray(this.criterias)) {
            data["criterias"] = [];
            for (let item of this.criterias)
                data["criterias"].push(item.toJSON());
        }
        data["sorting"] = this.sorting;
        data["skipCount"] = this.skipCount;
        data["maxResultCount"] = this.maxResultCount;
        return data;
    }
}

export interface ICategoryGuidGetDto {
    tenantId?: number | undefined;
    userId?: number | undefined;
    id?: string;
    language?: string | undefined;
    option?: string | undefined;
    search?: string | undefined;
    status?: string | undefined;
    from?: Date | undefined;
    to?: Date | undefined;
    sValue?: string[] | undefined;
    lValue?: number[] | undefined;
    gValue?: string[] | undefined;
    dValue?: number[] | undefined;
    tValue?: Date[] | undefined;
    criterias?: CriteriaRequestDto[] | undefined;
    sorting?: string | undefined;
    skipCount?: number;
    maxResultCount?: number;
}

export class CategoryOutputDto implements ICategoryOutputDto {
    isActive?: boolean;
    group?: string | undefined;
    value?: string | undefined;
    description?: string | undefined;
    ssoCategoryId?: string | undefined;
    parentId?: string | undefined;
    index?: number;
    order?: number;
    groupCode?: string | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;

    constructor(data?: ICategoryOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isActive = _data["isActive"];
            this.group = _data["group"];
            this.value = _data["value"];
            this.description = _data["description"];
            this.ssoCategoryId = _data["ssoCategoryId"];
            this.parentId = _data["parentId"];
            this.index = _data["index"];
            this.order = _data["order"];
            this.groupCode = _data["groupCode"];
            this.value1 = _data["value1"];
            this.value2 = _data["value2"];
            this.value3 = _data["value3"];
            this.value4 = _data["value4"];
            this.value5 = _data["value5"];
            this.value6 = _data["value6"];
            this.value7 = _data["value7"];
            this.value8 = _data["value8"];
            this.value9 = _data["value9"];
            this.value10 = _data["value10"];
            this.number1 = _data["number1"];
            this.number2 = _data["number2"];
            this.number3 = _data["number3"];
            this.number4 = _data["number4"];
            this.number5 = _data["number5"];
            this.number6 = _data["number6"];
            this.number7 = _data["number7"];
            this.number8 = _data["number8"];
            this.number9 = _data["number9"];
            this.number10 = _data["number10"];
            this.bool1 = _data["bool1"];
            this.bool2 = _data["bool2"];
            this.bool3 = _data["bool3"];
            this.bool4 = _data["bool4"];
            this.bool5 = _data["bool5"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.codeData = _data["codeData"];
            this.valueData = _data["valueData"];
            this.category = _data["category"];
            this.permissions = _data["permissions"];
            this.language = _data["language"];
            this.tenantId = _data["tenantId"];
            this.status = _data["status"];
            this.hideValue = _data["hideValue"];
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CategoryOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isActive"] = this.isActive;
        data["group"] = this.group;
        data["value"] = this.value;
        data["description"] = this.description;
        data["ssoCategoryId"] = this.ssoCategoryId;
        data["parentId"] = this.parentId;
        data["index"] = this.index;
        data["order"] = this.order;
        data["groupCode"] = this.groupCode;
        data["value1"] = this.value1;
        data["value2"] = this.value2;
        data["value3"] = this.value3;
        data["value4"] = this.value4;
        data["value5"] = this.value5;
        data["value6"] = this.value6;
        data["value7"] = this.value7;
        data["value8"] = this.value8;
        data["value9"] = this.value9;
        data["value10"] = this.value10;
        data["number1"] = this.number1;
        data["number2"] = this.number2;
        data["number3"] = this.number3;
        data["number4"] = this.number4;
        data["number5"] = this.number5;
        data["number6"] = this.number6;
        data["number7"] = this.number7;
        data["number8"] = this.number8;
        data["number9"] = this.number9;
        data["number10"] = this.number10;
        data["bool1"] = this.bool1;
        data["bool2"] = this.bool2;
        data["bool3"] = this.bool3;
        data["bool4"] = this.bool4;
        data["bool5"] = this.bool5;
        data["name"] = this.name;
        data["code"] = this.code;
        data["codeData"] = this.codeData;
        data["valueData"] = this.valueData;
        data["category"] = this.category;
        data["permissions"] = this.permissions;
        data["language"] = this.language;
        data["tenantId"] = this.tenantId;
        data["status"] = this.status;
        data["hideValue"] = this.hideValue;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface ICategoryOutputDto {
    isActive?: boolean;
    group?: string | undefined;
    value?: string | undefined;
    description?: string | undefined;
    ssoCategoryId?: string | undefined;
    parentId?: string | undefined;
    index?: number;
    order?: number;
    groupCode?: string | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;
}

export class CategoryInputDto implements ICategoryInputDto {
    shareKey?: ShareKeyDto;
    listOrgId?: string[] | undefined;
    listLoaiCongViecThayTheId?: string[] | undefined;
    isActive?: boolean;
    group?: string | undefined;
    value?: string | undefined;
    description?: string | undefined;
    ssoCategoryId?: string | undefined;
    parentId?: string | undefined;
    index?: number;
    order?: number;
    groupCode?: string | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;

    constructor(data?: ICategoryInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shareKey = _data["shareKey"] ? ShareKeyDto.fromJS(_data["shareKey"]) : <any>undefined;
            if (Array.isArray(_data["listOrgId"])) {
                this.listOrgId = [] as any;
                for (let item of _data["listOrgId"])
                    this.listOrgId!.push(item);
            }
            if (Array.isArray(_data["listLoaiCongViecThayTheId"])) {
                this.listLoaiCongViecThayTheId = [] as any;
                for (let item of _data["listLoaiCongViecThayTheId"])
                    this.listLoaiCongViecThayTheId!.push(item);
            }
            this.isActive = _data["isActive"];
            this.group = _data["group"];
            this.value = _data["value"];
            this.description = _data["description"];
            this.ssoCategoryId = _data["ssoCategoryId"];
            this.parentId = _data["parentId"];
            this.index = _data["index"];
            this.order = _data["order"];
            this.groupCode = _data["groupCode"];
            this.value1 = _data["value1"];
            this.value2 = _data["value2"];
            this.value3 = _data["value3"];
            this.value4 = _data["value4"];
            this.value5 = _data["value5"];
            this.value6 = _data["value6"];
            this.value7 = _data["value7"];
            this.value8 = _data["value8"];
            this.value9 = _data["value9"];
            this.value10 = _data["value10"];
            this.number1 = _data["number1"];
            this.number2 = _data["number2"];
            this.number3 = _data["number3"];
            this.number4 = _data["number4"];
            this.number5 = _data["number5"];
            this.number6 = _data["number6"];
            this.number7 = _data["number7"];
            this.number8 = _data["number8"];
            this.number9 = _data["number9"];
            this.number10 = _data["number10"];
            this.bool1 = _data["bool1"];
            this.bool2 = _data["bool2"];
            this.bool3 = _data["bool3"];
            this.bool4 = _data["bool4"];
            this.bool5 = _data["bool5"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.codeData = _data["codeData"];
            this.valueData = _data["valueData"];
            this.category = _data["category"];
            this.permissions = _data["permissions"];
            this.language = _data["language"];
            this.tenantId = _data["tenantId"];
            this.status = _data["status"];
            this.hideValue = _data["hideValue"];
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CategoryInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shareKey"] = this.shareKey ? this.shareKey.toJSON() : <any>undefined;
        if (Array.isArray(this.listOrgId)) {
            data["listOrgId"] = [];
            for (let item of this.listOrgId)
                data["listOrgId"].push(item);
        }
        if (Array.isArray(this.listLoaiCongViecThayTheId)) {
            data["listLoaiCongViecThayTheId"] = [];
            for (let item of this.listLoaiCongViecThayTheId)
                data["listLoaiCongViecThayTheId"].push(item);
        }
        data["isActive"] = this.isActive;
        data["group"] = this.group;
        data["value"] = this.value;
        data["description"] = this.description;
        data["ssoCategoryId"] = this.ssoCategoryId;
        data["parentId"] = this.parentId;
        data["index"] = this.index;
        data["order"] = this.order;
        data["groupCode"] = this.groupCode;
        data["value1"] = this.value1;
        data["value2"] = this.value2;
        data["value3"] = this.value3;
        data["value4"] = this.value4;
        data["value5"] = this.value5;
        data["value6"] = this.value6;
        data["value7"] = this.value7;
        data["value8"] = this.value8;
        data["value9"] = this.value9;
        data["value10"] = this.value10;
        data["number1"] = this.number1;
        data["number2"] = this.number2;
        data["number3"] = this.number3;
        data["number4"] = this.number4;
        data["number5"] = this.number5;
        data["number6"] = this.number6;
        data["number7"] = this.number7;
        data["number8"] = this.number8;
        data["number9"] = this.number9;
        data["number10"] = this.number10;
        data["bool1"] = this.bool1;
        data["bool2"] = this.bool2;
        data["bool3"] = this.bool3;
        data["bool4"] = this.bool4;
        data["bool5"] = this.bool5;
        data["name"] = this.name;
        data["code"] = this.code;
        data["codeData"] = this.codeData;
        data["valueData"] = this.valueData;
        data["category"] = this.category;
        data["permissions"] = this.permissions;
        data["language"] = this.language;
        data["tenantId"] = this.tenantId;
        data["status"] = this.status;
        data["hideValue"] = this.hideValue;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface ICategoryInputDto {
    shareKey?: ShareKeyDto;
    listOrgId?: string[] | undefined;
    listLoaiCongViecThayTheId?: string[] | undefined;
    isActive?: boolean;
    group?: string | undefined;
    value?: string | undefined;
    description?: string | undefined;
    ssoCategoryId?: string | undefined;
    parentId?: string | undefined;
    index?: number;
    order?: number;
    groupCode?: string | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;
}

export class CongViecGuidGetDto implements ICongViecGuidGetDto {
    tenantId?: number | undefined;
    userId?: number | undefined;
    id?: string;
    language?: string | undefined;
    option?: string | undefined;
    search?: string | undefined;
    status?: string | undefined;
    from?: Date | undefined;
    to?: Date | undefined;
    sValue?: string[] | undefined;
    lValue?: number[] | undefined;
    gValue?: string[] | undefined;
    dValue?: number[] | undefined;
    tValue?: Date[] | undefined;
    criterias?: CriteriaRequestDto[] | undefined;
    sorting?: string | undefined;
    skipCount?: number;
    maxResultCount?: number;

    constructor(data?: ICongViecGuidGetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.userId = _data["userId"];
            this.id = _data["id"];
            this.language = _data["language"];
            this.option = _data["option"];
            this.search = _data["search"];
            this.status = _data["status"];
            this.from = _data["from"] ? new Date(_data["from"].toString()) : <any>undefined;
            this.to = _data["to"] ? new Date(_data["to"].toString()) : <any>undefined;
            if (Array.isArray(_data["sValue"])) {
                this.sValue = [] as any;
                for (let item of _data["sValue"])
                    this.sValue!.push(item);
            }
            if (Array.isArray(_data["lValue"])) {
                this.lValue = [] as any;
                for (let item of _data["lValue"])
                    this.lValue!.push(item);
            }
            if (Array.isArray(_data["gValue"])) {
                this.gValue = [] as any;
                for (let item of _data["gValue"])
                    this.gValue!.push(item);
            }
            if (Array.isArray(_data["dValue"])) {
                this.dValue = [] as any;
                for (let item of _data["dValue"])
                    this.dValue!.push(item);
            }
            if (Array.isArray(_data["tValue"])) {
                this.tValue = [] as any;
                for (let item of _data["tValue"])
                    this.tValue!.push(new Date(item));
            }
            if (Array.isArray(_data["criterias"])) {
                this.criterias = [] as any;
                for (let item of _data["criterias"])
                    this.criterias!.push(CriteriaRequestDto.fromJS(item));
            }
            this.sorting = _data["sorting"];
            this.skipCount = _data["skipCount"];
            this.maxResultCount = _data["maxResultCount"];
        }
    }

    static fromJS(data: any): CongViecGuidGetDto {
        data = typeof data === 'object' ? data : {};
        let result = new CongViecGuidGetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["id"] = this.id;
        data["language"] = this.language;
        data["option"] = this.option;
        data["search"] = this.search;
        data["status"] = this.status;
        data["from"] = this.from ? this.from.toISOString() : <any>undefined;
        data["to"] = this.to ? this.to.toISOString() : <any>undefined;
        if (Array.isArray(this.sValue)) {
            data["sValue"] = [];
            for (let item of this.sValue)
                data["sValue"].push(item);
        }
        if (Array.isArray(this.lValue)) {
            data["lValue"] = [];
            for (let item of this.lValue)
                data["lValue"].push(item);
        }
        if (Array.isArray(this.gValue)) {
            data["gValue"] = [];
            for (let item of this.gValue)
                data["gValue"].push(item);
        }
        if (Array.isArray(this.dValue)) {
            data["dValue"] = [];
            for (let item of this.dValue)
                data["dValue"].push(item);
        }
        if (Array.isArray(this.tValue)) {
            data["tValue"] = [];
            for (let item of this.tValue)
                data["tValue"].push(item.toISOString());
        }
        if (Array.isArray(this.criterias)) {
            data["criterias"] = [];
            for (let item of this.criterias)
                data["criterias"].push(item.toJSON());
        }
        data["sorting"] = this.sorting;
        data["skipCount"] = this.skipCount;
        data["maxResultCount"] = this.maxResultCount;
        return data;
    }
}

export interface ICongViecGuidGetDto {
    tenantId?: number | undefined;
    userId?: number | undefined;
    id?: string;
    language?: string | undefined;
    option?: string | undefined;
    search?: string | undefined;
    status?: string | undefined;
    from?: Date | undefined;
    to?: Date | undefined;
    sValue?: string[] | undefined;
    lValue?: number[] | undefined;
    gValue?: string[] | undefined;
    dValue?: number[] | undefined;
    tValue?: Date[] | undefined;
    criterias?: CriteriaRequestDto[] | undefined;
    sorting?: string | undefined;
    skipCount?: number;
    maxResultCount?: number;
}

export class BaocaoTieuChiHoanThanhDto implements IBaocaoTieuChiHoanThanhDto {
    name?: string | undefined;
    tienDoHoanThanh?: string | undefined;
    bool1?: boolean | undefined;

    constructor(data?: IBaocaoTieuChiHoanThanhDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.tienDoHoanThanh = _data["tienDoHoanThanh"];
            this.bool1 = _data["bool1"];
        }
    }

    static fromJS(data: any): BaocaoTieuChiHoanThanhDto {
        data = typeof data === 'object' ? data : {};
        let result = new BaocaoTieuChiHoanThanhDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["tienDoHoanThanh"] = this.tienDoHoanThanh;
        data["bool1"] = this.bool1;
        return data;
    }
}

export interface IBaocaoTieuChiHoanThanhDto {
    name?: string | undefined;
    tienDoHoanThanh?: string | undefined;
    bool1?: boolean | undefined;
}

export class CongViecXepLoaiDto implements ICongViecXepLoaiDto {
    xuLy?: InfoDetailUserDto;
    thoiGianThucTe?: number | undefined;
    xepLoai?: string | undefined;
    noiDungXepLoai?: string | undefined;
    listFile?: FileDto[] | undefined;
    status?: string | undefined;
    ngayBaoCao?: number | undefined;
    listTieuChiHoanThanh?: BaocaoTieuChiHoanThanhDto[] | undefined;
    id?: string;

    constructor(data?: ICongViecXepLoaiDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.xuLy = _data["xuLy"] ? InfoDetailUserDto.fromJS(_data["xuLy"]) : <any>undefined;
            this.thoiGianThucTe = _data["thoiGianThucTe"];
            this.xepLoai = _data["xepLoai"];
            this.noiDungXepLoai = _data["noiDungXepLoai"];
            if (Array.isArray(_data["listFile"])) {
                this.listFile = [] as any;
                for (let item of _data["listFile"])
                    this.listFile!.push(FileDto.fromJS(item));
            }
            this.status = _data["status"];
            this.ngayBaoCao = _data["ngayBaoCao"];
            if (Array.isArray(_data["listTieuChiHoanThanh"])) {
                this.listTieuChiHoanThanh = [] as any;
                for (let item of _data["listTieuChiHoanThanh"])
                    this.listTieuChiHoanThanh!.push(BaocaoTieuChiHoanThanhDto.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CongViecXepLoaiDto {
        data = typeof data === 'object' ? data : {};
        let result = new CongViecXepLoaiDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["xuLy"] = this.xuLy ? this.xuLy.toJSON() : <any>undefined;
        data["thoiGianThucTe"] = this.thoiGianThucTe;
        data["xepLoai"] = this.xepLoai;
        data["noiDungXepLoai"] = this.noiDungXepLoai;
        if (Array.isArray(this.listFile)) {
            data["listFile"] = [];
            for (let item of this.listFile)
                data["listFile"].push(item.toJSON());
        }
        data["status"] = this.status;
        data["ngayBaoCao"] = this.ngayBaoCao;
        if (Array.isArray(this.listTieuChiHoanThanh)) {
            data["listTieuChiHoanThanh"] = [];
            for (let item of this.listTieuChiHoanThanh)
                data["listTieuChiHoanThanh"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data;
    }
}

export interface ICongViecXepLoaiDto {
    xuLy?: InfoDetailUserDto;
    thoiGianThucTe?: number | undefined;
    xepLoai?: string | undefined;
    noiDungXepLoai?: string | undefined;
    listFile?: FileDto[] | undefined;
    status?: string | undefined;
    ngayBaoCao?: number | undefined;
    listTieuChiHoanThanh?: BaocaoTieuChiHoanThanhDto[] | undefined;
    id?: string;
}

export class CongViecDinhKyDto implements ICongViecDinhKyDto {
    isActive?: boolean;
    loaiDinhKy?: string | undefined;
    value?: string | undefined;

    constructor(data?: ICongViecDinhKyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isActive = _data["isActive"];
            this.loaiDinhKy = _data["loaiDinhKy"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): CongViecDinhKyDto {
        data = typeof data === 'object' ? data : {};
        let result = new CongViecDinhKyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isActive"] = this.isActive;
        data["loaiDinhKy"] = this.loaiDinhKy;
        data["value"] = this.value;
        return data;
    }
}

export interface ICongViecDinhKyDto {
    isActive?: boolean;
    loaiDinhKy?: string | undefined;
    value?: string | undefined;
}

export class CongViecLienQuanDto implements ICongViecLienQuanDto {
    loaiLienQuan?: string | undefined;
    title!: string;
    hanHoanThanh!: number;
    xuLy!: InfoDetailUserDto;
    duyet!: InfoDetailUserDto;
    giamSat?: InfoDetailUserDto;
    boPhanTao!: InfoDetailUserDto;
    loaiCongViecId!: string;
    parentId?: string | undefined;
    status?: string | undefined;
    order?: number;
    code?: string | undefined;
    bool1?: boolean | undefined;
    number1?: number;
    dataReference?: string | undefined;
    id?: string;

    constructor(data?: ICongViecLienQuanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.xuLy = new InfoDetailUserDto();
            this.duyet = new InfoDetailUserDto();
            this.boPhanTao = new InfoDetailUserDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.loaiLienQuan = _data["loaiLienQuan"];
            this.title = _data["title"];
            this.hanHoanThanh = _data["hanHoanThanh"];
            this.xuLy = _data["xuLy"] ? InfoDetailUserDto.fromJS(_data["xuLy"]) : new InfoDetailUserDto();
            this.duyet = _data["duyet"] ? InfoDetailUserDto.fromJS(_data["duyet"]) : new InfoDetailUserDto();
            this.giamSat = _data["giamSat"] ? InfoDetailUserDto.fromJS(_data["giamSat"]) : <any>undefined;
            this.boPhanTao = _data["boPhanTao"] ? InfoDetailUserDto.fromJS(_data["boPhanTao"]) : new InfoDetailUserDto();
            this.loaiCongViecId = _data["loaiCongViecId"];
            this.parentId = _data["parentId"];
            this.status = _data["status"];
            this.order = _data["order"];
            this.code = _data["code"];
            this.bool1 = _data["bool1"];
            this.number1 = _data["number1"];
            this.dataReference = _data["dataReference"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CongViecLienQuanDto {
        data = typeof data === 'object' ? data : {};
        let result = new CongViecLienQuanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["loaiLienQuan"] = this.loaiLienQuan;
        data["title"] = this.title;
        data["hanHoanThanh"] = this.hanHoanThanh;
        data["xuLy"] = this.xuLy ? this.xuLy.toJSON() : <any>undefined;
        data["duyet"] = this.duyet ? this.duyet.toJSON() : <any>undefined;
        data["giamSat"] = this.giamSat ? this.giamSat.toJSON() : <any>undefined;
        data["boPhanTao"] = this.boPhanTao ? this.boPhanTao.toJSON() : <any>undefined;
        data["loaiCongViecId"] = this.loaiCongViecId;
        data["parentId"] = this.parentId;
        data["status"] = this.status;
        data["order"] = this.order;
        data["code"] = this.code;
        data["bool1"] = this.bool1;
        data["number1"] = this.number1;
        data["dataReference"] = this.dataReference;
        data["id"] = this.id;
        return data;
    }
}

export interface ICongViecLienQuanDto {
    loaiLienQuan?: string | undefined;
    title: string;
    hanHoanThanh: number;
    xuLy: InfoDetailUserDto;
    duyet: InfoDetailUserDto;
    giamSat?: InfoDetailUserDto;
    boPhanTao: InfoDetailUserDto;
    loaiCongViecId: string;
    parentId?: string | undefined;
    status?: string | undefined;
    order?: number;
    code?: string | undefined;
    bool1?: boolean | undefined;
    number1?: number;
    dataReference?: string | undefined;
    id?: string;
}

export class DoiTuongLienQuanDto implements IDoiTuongLienQuanDto {
    fullName?: string | undefined;
    userId?: number | undefined;
    orgId?: string | undefined;
    orgName?: string | undefined;
    loaiLienQuan?: string | undefined;
    noiDung?: string | undefined;

    constructor(data?: IDoiTuongLienQuanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fullName = _data["fullName"];
            this.userId = _data["userId"];
            this.orgId = _data["orgId"];
            this.orgName = _data["orgName"];
            this.loaiLienQuan = _data["loaiLienQuan"];
            this.noiDung = _data["noiDung"];
        }
    }

    static fromJS(data: any): DoiTuongLienQuanDto {
        data = typeof data === 'object' ? data : {};
        let result = new DoiTuongLienQuanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullName"] = this.fullName;
        data["userId"] = this.userId;
        data["orgId"] = this.orgId;
        data["orgName"] = this.orgName;
        data["loaiLienQuan"] = this.loaiLienQuan;
        data["noiDung"] = this.noiDung;
        return data;
    }
}

export interface IDoiTuongLienQuanDto {
    fullName?: string | undefined;
    userId?: number | undefined;
    orgId?: string | undefined;
    orgName?: string | undefined;
    loaiLienQuan?: string | undefined;
    noiDung?: string | undefined;
}

export class TieuChiDto implements ITieuChiDto {
    title?: string | undefined;
    listThongSo?: string[] | undefined;

    constructor(data?: ITieuChiDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            if (Array.isArray(_data["listThongSo"])) {
                this.listThongSo = [] as any;
                for (let item of _data["listThongSo"])
                    this.listThongSo!.push(item);
            }
        }
    }

    static fromJS(data: any): TieuChiDto {
        data = typeof data === 'object' ? data : {};
        let result = new TieuChiDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        if (Array.isArray(this.listThongSo)) {
            data["listThongSo"] = [];
            for (let item of this.listThongSo)
                data["listThongSo"].push(item);
        }
        return data;
    }
}

export interface ITieuChiDto {
    title?: string | undefined;
    listThongSo?: string[] | undefined;
}

export class CongViecBasicDto implements ICongViecBasicDto {
    title!: string;
    hanHoanThanh!: number;
    xuLy!: InfoDetailUserDto;
    duyet!: InfoDetailUserDto;
    giamSat?: InfoDetailUserDto;
    boPhanTao!: InfoDetailUserDto;
    loaiCongViecId!: string;
    parentId?: string | undefined;
    status?: string | undefined;
    order?: number;
    code?: string | undefined;
    bool1?: boolean | undefined;
    number1?: number;
    dataReference?: string | undefined;
    id?: string;

    constructor(data?: ICongViecBasicDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.xuLy = new InfoDetailUserDto();
            this.duyet = new InfoDetailUserDto();
            this.boPhanTao = new InfoDetailUserDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.hanHoanThanh = _data["hanHoanThanh"];
            this.xuLy = _data["xuLy"] ? InfoDetailUserDto.fromJS(_data["xuLy"]) : new InfoDetailUserDto();
            this.duyet = _data["duyet"] ? InfoDetailUserDto.fromJS(_data["duyet"]) : new InfoDetailUserDto();
            this.giamSat = _data["giamSat"] ? InfoDetailUserDto.fromJS(_data["giamSat"]) : <any>undefined;
            this.boPhanTao = _data["boPhanTao"] ? InfoDetailUserDto.fromJS(_data["boPhanTao"]) : new InfoDetailUserDto();
            this.loaiCongViecId = _data["loaiCongViecId"];
            this.parentId = _data["parentId"];
            this.status = _data["status"];
            this.order = _data["order"];
            this.code = _data["code"];
            this.bool1 = _data["bool1"];
            this.number1 = _data["number1"];
            this.dataReference = _data["dataReference"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CongViecBasicDto {
        data = typeof data === 'object' ? data : {};
        let result = new CongViecBasicDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["hanHoanThanh"] = this.hanHoanThanh;
        data["xuLy"] = this.xuLy ? this.xuLy.toJSON() : <any>undefined;
        data["duyet"] = this.duyet ? this.duyet.toJSON() : <any>undefined;
        data["giamSat"] = this.giamSat ? this.giamSat.toJSON() : <any>undefined;
        data["boPhanTao"] = this.boPhanTao ? this.boPhanTao.toJSON() : <any>undefined;
        data["loaiCongViecId"] = this.loaiCongViecId;
        data["parentId"] = this.parentId;
        data["status"] = this.status;
        data["order"] = this.order;
        data["code"] = this.code;
        data["bool1"] = this.bool1;
        data["number1"] = this.number1;
        data["dataReference"] = this.dataReference;
        data["id"] = this.id;
        return data;
    }
}

export interface ICongViecBasicDto {
    title: string;
    hanHoanThanh: number;
    xuLy: InfoDetailUserDto;
    duyet: InfoDetailUserDto;
    giamSat?: InfoDetailUserDto;
    boPhanTao: InfoDetailUserDto;
    loaiCongViecId: string;
    parentId?: string | undefined;
    status?: string | undefined;
    order?: number;
    code?: string | undefined;
    bool1?: boolean | undefined;
    number1?: number;
    dataReference?: string | undefined;
    id?: string;
}

export class CongViecOutputDto implements ICongViecOutputDto {
    loaiCongViecName?: string | undefined;
    statusName?: string | undefined;
    listXepLoai?: CongViecXepLoaiDto[] | undefined;
    listDuyet?: InfoDetailUserDto[] | undefined;
    listPermission?: string[] | undefined;
    title!: string;
    doBaoMat?: number;
    doUuTien?: number;
    loaiCongViecId!: string;
    thoiGianThucHien!: number;
    thoiGianThucTe?: number | undefined;
    tongThoiGianChiDinhViecCon?: number | undefined;
    tongThoiGianThucTeViecCon?: number | undefined;
    hanBatDau?: number | undefined;
    hanHoanThanh!: number;
    quyTrinhCode?: string | undefined;
    content?: string | undefined;
    tags?: string | undefined;
    dataReference?: string | undefined;
    congViecDinhKy?: CongViecDinhKyDto;
    giamSat!: InfoDetailUserDto;
    xuLy!: InfoDetailUserDto;
    duyet!: InfoDetailUserDto;
    boPhanTao!: InfoDetailUserDto;
    listCongViecLienQuan?: CongViecLienQuanDto[] | undefined;
    listDoiTuongLienQuan?: DoiTuongLienQuanDto[] | undefined;
    listTieuChi?: TieuChiDto[] | undefined;
    listChildren?: CongViecBasicDto[] | undefined;
    listFile?: FileDto[] | undefined;
    parentId?: string | undefined;
    index?: number;
    order?: number;
    groupCode?: string | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;

    constructor(data?: ICongViecOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.giamSat = new InfoDetailUserDto();
            this.xuLy = new InfoDetailUserDto();
            this.duyet = new InfoDetailUserDto();
            this.boPhanTao = new InfoDetailUserDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.loaiCongViecName = _data["loaiCongViecName"];
            this.statusName = _data["statusName"];
            if (Array.isArray(_data["listXepLoai"])) {
                this.listXepLoai = [] as any;
                for (let item of _data["listXepLoai"])
                    this.listXepLoai!.push(CongViecXepLoaiDto.fromJS(item));
            }
            if (Array.isArray(_data["listDuyet"])) {
                this.listDuyet = [] as any;
                for (let item of _data["listDuyet"])
                    this.listDuyet!.push(InfoDetailUserDto.fromJS(item));
            }
            if (Array.isArray(_data["listPermission"])) {
                this.listPermission = [] as any;
                for (let item of _data["listPermission"])
                    this.listPermission!.push(item);
            }
            this.title = _data["title"];
            this.doBaoMat = _data["doBaoMat"];
            this.doUuTien = _data["doUuTien"];
            this.loaiCongViecId = _data["loaiCongViecId"];
            this.thoiGianThucHien = _data["thoiGianThucHien"];
            this.thoiGianThucTe = _data["thoiGianThucTe"];
            this.tongThoiGianChiDinhViecCon = _data["tongThoiGianChiDinhViecCon"];
            this.tongThoiGianThucTeViecCon = _data["tongThoiGianThucTeViecCon"];
            this.hanBatDau = _data["hanBatDau"];
            this.hanHoanThanh = _data["hanHoanThanh"];
            this.quyTrinhCode = _data["quyTrinhCode"];
            this.content = _data["content"];
            this.tags = _data["tags"];
            this.dataReference = _data["dataReference"];
            this.congViecDinhKy = _data["congViecDinhKy"] ? CongViecDinhKyDto.fromJS(_data["congViecDinhKy"]) : <any>undefined;
            this.giamSat = _data["giamSat"] ? InfoDetailUserDto.fromJS(_data["giamSat"]) : new InfoDetailUserDto();
            this.xuLy = _data["xuLy"] ? InfoDetailUserDto.fromJS(_data["xuLy"]) : new InfoDetailUserDto();
            this.duyet = _data["duyet"] ? InfoDetailUserDto.fromJS(_data["duyet"]) : new InfoDetailUserDto();
            this.boPhanTao = _data["boPhanTao"] ? InfoDetailUserDto.fromJS(_data["boPhanTao"]) : new InfoDetailUserDto();
            if (Array.isArray(_data["listCongViecLienQuan"])) {
                this.listCongViecLienQuan = [] as any;
                for (let item of _data["listCongViecLienQuan"])
                    this.listCongViecLienQuan!.push(CongViecLienQuanDto.fromJS(item));
            }
            if (Array.isArray(_data["listDoiTuongLienQuan"])) {
                this.listDoiTuongLienQuan = [] as any;
                for (let item of _data["listDoiTuongLienQuan"])
                    this.listDoiTuongLienQuan!.push(DoiTuongLienQuanDto.fromJS(item));
            }
            if (Array.isArray(_data["listTieuChi"])) {
                this.listTieuChi = [] as any;
                for (let item of _data["listTieuChi"])
                    this.listTieuChi!.push(TieuChiDto.fromJS(item));
            }
            if (Array.isArray(_data["listChildren"])) {
                this.listChildren = [] as any;
                for (let item of _data["listChildren"])
                    this.listChildren!.push(CongViecBasicDto.fromJS(item));
            }
            if (Array.isArray(_data["listFile"])) {
                this.listFile = [] as any;
                for (let item of _data["listFile"])
                    this.listFile!.push(FileDto.fromJS(item));
            }
            this.parentId = _data["parentId"];
            this.index = _data["index"];
            this.order = _data["order"];
            this.groupCode = _data["groupCode"];
            this.value1 = _data["value1"];
            this.value2 = _data["value2"];
            this.value3 = _data["value3"];
            this.value4 = _data["value4"];
            this.value5 = _data["value5"];
            this.value6 = _data["value6"];
            this.value7 = _data["value7"];
            this.value8 = _data["value8"];
            this.value9 = _data["value9"];
            this.value10 = _data["value10"];
            this.number1 = _data["number1"];
            this.number2 = _data["number2"];
            this.number3 = _data["number3"];
            this.number4 = _data["number4"];
            this.number5 = _data["number5"];
            this.number6 = _data["number6"];
            this.number7 = _data["number7"];
            this.number8 = _data["number8"];
            this.number9 = _data["number9"];
            this.number10 = _data["number10"];
            this.bool1 = _data["bool1"];
            this.bool2 = _data["bool2"];
            this.bool3 = _data["bool3"];
            this.bool4 = _data["bool4"];
            this.bool5 = _data["bool5"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.codeData = _data["codeData"];
            this.valueData = _data["valueData"];
            this.category = _data["category"];
            this.permissions = _data["permissions"];
            this.language = _data["language"];
            this.tenantId = _data["tenantId"];
            this.status = _data["status"];
            this.hideValue = _data["hideValue"];
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CongViecOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CongViecOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["loaiCongViecName"] = this.loaiCongViecName;
        data["statusName"] = this.statusName;
        if (Array.isArray(this.listXepLoai)) {
            data["listXepLoai"] = [];
            for (let item of this.listXepLoai)
                data["listXepLoai"].push(item.toJSON());
        }
        if (Array.isArray(this.listDuyet)) {
            data["listDuyet"] = [];
            for (let item of this.listDuyet)
                data["listDuyet"].push(item.toJSON());
        }
        if (Array.isArray(this.listPermission)) {
            data["listPermission"] = [];
            for (let item of this.listPermission)
                data["listPermission"].push(item);
        }
        data["title"] = this.title;
        data["doBaoMat"] = this.doBaoMat;
        data["doUuTien"] = this.doUuTien;
        data["loaiCongViecId"] = this.loaiCongViecId;
        data["thoiGianThucHien"] = this.thoiGianThucHien;
        data["thoiGianThucTe"] = this.thoiGianThucTe;
        data["tongThoiGianChiDinhViecCon"] = this.tongThoiGianChiDinhViecCon;
        data["tongThoiGianThucTeViecCon"] = this.tongThoiGianThucTeViecCon;
        data["hanBatDau"] = this.hanBatDau;
        data["hanHoanThanh"] = this.hanHoanThanh;
        data["quyTrinhCode"] = this.quyTrinhCode;
        data["content"] = this.content;
        data["tags"] = this.tags;
        data["dataReference"] = this.dataReference;
        data["congViecDinhKy"] = this.congViecDinhKy ? this.congViecDinhKy.toJSON() : <any>undefined;
        data["giamSat"] = this.giamSat ? this.giamSat.toJSON() : <any>undefined;
        data["xuLy"] = this.xuLy ? this.xuLy.toJSON() : <any>undefined;
        data["duyet"] = this.duyet ? this.duyet.toJSON() : <any>undefined;
        data["boPhanTao"] = this.boPhanTao ? this.boPhanTao.toJSON() : <any>undefined;
        if (Array.isArray(this.listCongViecLienQuan)) {
            data["listCongViecLienQuan"] = [];
            for (let item of this.listCongViecLienQuan)
                data["listCongViecLienQuan"].push(item.toJSON());
        }
        if (Array.isArray(this.listDoiTuongLienQuan)) {
            data["listDoiTuongLienQuan"] = [];
            for (let item of this.listDoiTuongLienQuan)
                data["listDoiTuongLienQuan"].push(item.toJSON());
        }
        if (Array.isArray(this.listTieuChi)) {
            data["listTieuChi"] = [];
            for (let item of this.listTieuChi)
                data["listTieuChi"].push(item.toJSON());
        }
        if (Array.isArray(this.listChildren)) {
            data["listChildren"] = [];
            for (let item of this.listChildren)
                data["listChildren"].push(item.toJSON());
        }
        if (Array.isArray(this.listFile)) {
            data["listFile"] = [];
            for (let item of this.listFile)
                data["listFile"].push(item.toJSON());
        }
        data["parentId"] = this.parentId;
        data["index"] = this.index;
        data["order"] = this.order;
        data["groupCode"] = this.groupCode;
        data["value1"] = this.value1;
        data["value2"] = this.value2;
        data["value3"] = this.value3;
        data["value4"] = this.value4;
        data["value5"] = this.value5;
        data["value6"] = this.value6;
        data["value7"] = this.value7;
        data["value8"] = this.value8;
        data["value9"] = this.value9;
        data["value10"] = this.value10;
        data["number1"] = this.number1;
        data["number2"] = this.number2;
        data["number3"] = this.number3;
        data["number4"] = this.number4;
        data["number5"] = this.number5;
        data["number6"] = this.number6;
        data["number7"] = this.number7;
        data["number8"] = this.number8;
        data["number9"] = this.number9;
        data["number10"] = this.number10;
        data["bool1"] = this.bool1;
        data["bool2"] = this.bool2;
        data["bool3"] = this.bool3;
        data["bool4"] = this.bool4;
        data["bool5"] = this.bool5;
        data["name"] = this.name;
        data["code"] = this.code;
        data["codeData"] = this.codeData;
        data["valueData"] = this.valueData;
        data["category"] = this.category;
        data["permissions"] = this.permissions;
        data["language"] = this.language;
        data["tenantId"] = this.tenantId;
        data["status"] = this.status;
        data["hideValue"] = this.hideValue;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface ICongViecOutputDto {
    loaiCongViecName?: string | undefined;
    statusName?: string | undefined;
    listXepLoai?: CongViecXepLoaiDto[] | undefined;
    listDuyet?: InfoDetailUserDto[] | undefined;
    listPermission?: string[] | undefined;
    title: string;
    doBaoMat?: number;
    doUuTien?: number;
    loaiCongViecId: string;
    thoiGianThucHien: number;
    thoiGianThucTe?: number | undefined;
    tongThoiGianChiDinhViecCon?: number | undefined;
    tongThoiGianThucTeViecCon?: number | undefined;
    hanBatDau?: number | undefined;
    hanHoanThanh: number;
    quyTrinhCode?: string | undefined;
    content?: string | undefined;
    tags?: string | undefined;
    dataReference?: string | undefined;
    congViecDinhKy?: CongViecDinhKyDto;
    giamSat: InfoDetailUserDto;
    xuLy: InfoDetailUserDto;
    duyet: InfoDetailUserDto;
    boPhanTao: InfoDetailUserDto;
    listCongViecLienQuan?: CongViecLienQuanDto[] | undefined;
    listDoiTuongLienQuan?: DoiTuongLienQuanDto[] | undefined;
    listTieuChi?: TieuChiDto[] | undefined;
    listChildren?: CongViecBasicDto[] | undefined;
    listFile?: FileDto[] | undefined;
    parentId?: string | undefined;
    index?: number;
    order?: number;
    groupCode?: string | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;
}

export class CongViecOutputDtoPagedResultDto implements ICongViecOutputDtoPagedResultDto {
    totalCount?: number;
    items?: CongViecOutputDto[] | undefined;

    constructor(data?: ICongViecOutputDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CongViecOutputDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CongViecOutputDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new CongViecOutputDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICongViecOutputDtoPagedResultDto {
    totalCount?: number;
    items?: CongViecOutputDto[] | undefined;
}

export class CongViecLog implements ICongViecLog {
    tenantId?: number | undefined;
    creationTime?: Date;
    userId?: number | undefined;
    key?: string | undefined;
    value?: string | undefined;
    status?: string | undefined;
    action?: string | undefined;
    type?: string | undefined;
    docId?: string | undefined;

    constructor(data?: ICongViecLog) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.userId = _data["userId"];
            this.key = _data["key"];
            this.value = _data["value"];
            this.status = _data["status"];
            this.action = _data["action"];
            this.type = _data["type"];
            this.docId = _data["docId"];
        }
    }

    static fromJS(data: any): CongViecLog {
        data = typeof data === 'object' ? data : {};
        let result = new CongViecLog();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["userId"] = this.userId;
        data["key"] = this.key;
        data["value"] = this.value;
        data["status"] = this.status;
        data["action"] = this.action;
        data["type"] = this.type;
        data["docId"] = this.docId;
        return data;
    }
}

export interface ICongViecLog {
    tenantId?: number | undefined;
    creationTime?: Date;
    userId?: number | undefined;
    key?: string | undefined;
    value?: string | undefined;
    status?: string | undefined;
    action?: string | undefined;
    type?: string | undefined;
    docId?: string | undefined;
}

export class CongViecInputDto implements ICongViecInputDto {
    shareKey?: ShareKeyDto;
    title!: string;
    doBaoMat?: number;
    doUuTien?: number;
    loaiCongViecId!: string;
    thoiGianThucHien!: number;
    thoiGianThucTe?: number | undefined;
    tongThoiGianChiDinhViecCon?: number | undefined;
    tongThoiGianThucTeViecCon?: number | undefined;
    hanBatDau?: number | undefined;
    hanHoanThanh!: number;
    quyTrinhCode?: string | undefined;
    content?: string | undefined;
    tags?: string | undefined;
    dataReference?: string | undefined;
    congViecDinhKy?: CongViecDinhKyDto;
    giamSat!: InfoDetailUserDto;
    xuLy!: InfoDetailUserDto;
    duyet!: InfoDetailUserDto;
    boPhanTao!: InfoDetailUserDto;
    listCongViecLienQuan?: CongViecLienQuanDto[] | undefined;
    listDoiTuongLienQuan?: DoiTuongLienQuanDto[] | undefined;
    listTieuChi?: TieuChiDto[] | undefined;
    listChildren?: CongViecBasicDto[] | undefined;
    listFile?: FileDto[] | undefined;
    parentId?: string | undefined;
    index?: number;
    order?: number;
    groupCode?: string | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;

    constructor(data?: ICongViecInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.giamSat = new InfoDetailUserDto();
            this.xuLy = new InfoDetailUserDto();
            this.duyet = new InfoDetailUserDto();
            this.boPhanTao = new InfoDetailUserDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shareKey = _data["shareKey"] ? ShareKeyDto.fromJS(_data["shareKey"]) : <any>undefined;
            this.title = _data["title"];
            this.doBaoMat = _data["doBaoMat"];
            this.doUuTien = _data["doUuTien"];
            this.loaiCongViecId = _data["loaiCongViecId"];
            this.thoiGianThucHien = _data["thoiGianThucHien"];
            this.thoiGianThucTe = _data["thoiGianThucTe"];
            this.tongThoiGianChiDinhViecCon = _data["tongThoiGianChiDinhViecCon"];
            this.tongThoiGianThucTeViecCon = _data["tongThoiGianThucTeViecCon"];
            this.hanBatDau = _data["hanBatDau"];
            this.hanHoanThanh = _data["hanHoanThanh"];
            this.quyTrinhCode = _data["quyTrinhCode"];
            this.content = _data["content"];
            this.tags = _data["tags"];
            this.dataReference = _data["dataReference"];
            this.congViecDinhKy = _data["congViecDinhKy"] ? CongViecDinhKyDto.fromJS(_data["congViecDinhKy"]) : <any>undefined;
            this.giamSat = _data["giamSat"] ? InfoDetailUserDto.fromJS(_data["giamSat"]) : new InfoDetailUserDto();
            this.xuLy = _data["xuLy"] ? InfoDetailUserDto.fromJS(_data["xuLy"]) : new InfoDetailUserDto();
            this.duyet = _data["duyet"] ? InfoDetailUserDto.fromJS(_data["duyet"]) : new InfoDetailUserDto();
            this.boPhanTao = _data["boPhanTao"] ? InfoDetailUserDto.fromJS(_data["boPhanTao"]) : new InfoDetailUserDto();
            if (Array.isArray(_data["listCongViecLienQuan"])) {
                this.listCongViecLienQuan = [] as any;
                for (let item of _data["listCongViecLienQuan"])
                    this.listCongViecLienQuan!.push(CongViecLienQuanDto.fromJS(item));
            }
            if (Array.isArray(_data["listDoiTuongLienQuan"])) {
                this.listDoiTuongLienQuan = [] as any;
                for (let item of _data["listDoiTuongLienQuan"])
                    this.listDoiTuongLienQuan!.push(DoiTuongLienQuanDto.fromJS(item));
            }
            if (Array.isArray(_data["listTieuChi"])) {
                this.listTieuChi = [] as any;
                for (let item of _data["listTieuChi"])
                    this.listTieuChi!.push(TieuChiDto.fromJS(item));
            }
            if (Array.isArray(_data["listChildren"])) {
                this.listChildren = [] as any;
                for (let item of _data["listChildren"])
                    this.listChildren!.push(CongViecBasicDto.fromJS(item));
            }
            if (Array.isArray(_data["listFile"])) {
                this.listFile = [] as any;
                for (let item of _data["listFile"])
                    this.listFile!.push(FileDto.fromJS(item));
            }
            this.parentId = _data["parentId"];
            this.index = _data["index"];
            this.order = _data["order"];
            this.groupCode = _data["groupCode"];
            this.value1 = _data["value1"];
            this.value2 = _data["value2"];
            this.value3 = _data["value3"];
            this.value4 = _data["value4"];
            this.value5 = _data["value5"];
            this.value6 = _data["value6"];
            this.value7 = _data["value7"];
            this.value8 = _data["value8"];
            this.value9 = _data["value9"];
            this.value10 = _data["value10"];
            this.number1 = _data["number1"];
            this.number2 = _data["number2"];
            this.number3 = _data["number3"];
            this.number4 = _data["number4"];
            this.number5 = _data["number5"];
            this.number6 = _data["number6"];
            this.number7 = _data["number7"];
            this.number8 = _data["number8"];
            this.number9 = _data["number9"];
            this.number10 = _data["number10"];
            this.bool1 = _data["bool1"];
            this.bool2 = _data["bool2"];
            this.bool3 = _data["bool3"];
            this.bool4 = _data["bool4"];
            this.bool5 = _data["bool5"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.codeData = _data["codeData"];
            this.valueData = _data["valueData"];
            this.category = _data["category"];
            this.permissions = _data["permissions"];
            this.language = _data["language"];
            this.tenantId = _data["tenantId"];
            this.status = _data["status"];
            this.hideValue = _data["hideValue"];
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CongViecInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new CongViecInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shareKey"] = this.shareKey ? this.shareKey.toJSON() : <any>undefined;
        data["title"] = this.title;
        data["doBaoMat"] = this.doBaoMat;
        data["doUuTien"] = this.doUuTien;
        data["loaiCongViecId"] = this.loaiCongViecId;
        data["thoiGianThucHien"] = this.thoiGianThucHien;
        data["thoiGianThucTe"] = this.thoiGianThucTe;
        data["tongThoiGianChiDinhViecCon"] = this.tongThoiGianChiDinhViecCon;
        data["tongThoiGianThucTeViecCon"] = this.tongThoiGianThucTeViecCon;
        data["hanBatDau"] = this.hanBatDau;
        data["hanHoanThanh"] = this.hanHoanThanh;
        data["quyTrinhCode"] = this.quyTrinhCode;
        data["content"] = this.content;
        data["tags"] = this.tags;
        data["dataReference"] = this.dataReference;
        data["congViecDinhKy"] = this.congViecDinhKy ? this.congViecDinhKy.toJSON() : <any>undefined;
        data["giamSat"] = this.giamSat ? this.giamSat.toJSON() : <any>undefined;
        data["xuLy"] = this.xuLy ? this.xuLy.toJSON() : <any>undefined;
        data["duyet"] = this.duyet ? this.duyet.toJSON() : <any>undefined;
        data["boPhanTao"] = this.boPhanTao ? this.boPhanTao.toJSON() : <any>undefined;
        if (Array.isArray(this.listCongViecLienQuan)) {
            data["listCongViecLienQuan"] = [];
            for (let item of this.listCongViecLienQuan)
                data["listCongViecLienQuan"].push(item.toJSON());
        }
        if (Array.isArray(this.listDoiTuongLienQuan)) {
            data["listDoiTuongLienQuan"] = [];
            for (let item of this.listDoiTuongLienQuan)
                data["listDoiTuongLienQuan"].push(item.toJSON());
        }
        if (Array.isArray(this.listTieuChi)) {
            data["listTieuChi"] = [];
            for (let item of this.listTieuChi)
                data["listTieuChi"].push(item.toJSON());
        }
        if (Array.isArray(this.listChildren)) {
            data["listChildren"] = [];
            for (let item of this.listChildren)
                data["listChildren"].push(item.toJSON());
        }
        if (Array.isArray(this.listFile)) {
            data["listFile"] = [];
            for (let item of this.listFile)
                data["listFile"].push(item.toJSON());
        }
        data["parentId"] = this.parentId;
        data["index"] = this.index;
        data["order"] = this.order;
        data["groupCode"] = this.groupCode;
        data["value1"] = this.value1;
        data["value2"] = this.value2;
        data["value3"] = this.value3;
        data["value4"] = this.value4;
        data["value5"] = this.value5;
        data["value6"] = this.value6;
        data["value7"] = this.value7;
        data["value8"] = this.value8;
        data["value9"] = this.value9;
        data["value10"] = this.value10;
        data["number1"] = this.number1;
        data["number2"] = this.number2;
        data["number3"] = this.number3;
        data["number4"] = this.number4;
        data["number5"] = this.number5;
        data["number6"] = this.number6;
        data["number7"] = this.number7;
        data["number8"] = this.number8;
        data["number9"] = this.number9;
        data["number10"] = this.number10;
        data["bool1"] = this.bool1;
        data["bool2"] = this.bool2;
        data["bool3"] = this.bool3;
        data["bool4"] = this.bool4;
        data["bool5"] = this.bool5;
        data["name"] = this.name;
        data["code"] = this.code;
        data["codeData"] = this.codeData;
        data["valueData"] = this.valueData;
        data["category"] = this.category;
        data["permissions"] = this.permissions;
        data["language"] = this.language;
        data["tenantId"] = this.tenantId;
        data["status"] = this.status;
        data["hideValue"] = this.hideValue;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface ICongViecInputDto {
    shareKey?: ShareKeyDto;
    title: string;
    doBaoMat?: number;
    doUuTien?: number;
    loaiCongViecId: string;
    thoiGianThucHien: number;
    thoiGianThucTe?: number | undefined;
    tongThoiGianChiDinhViecCon?: number | undefined;
    tongThoiGianThucTeViecCon?: number | undefined;
    hanBatDau?: number | undefined;
    hanHoanThanh: number;
    quyTrinhCode?: string | undefined;
    content?: string | undefined;
    tags?: string | undefined;
    dataReference?: string | undefined;
    congViecDinhKy?: CongViecDinhKyDto;
    giamSat: InfoDetailUserDto;
    xuLy: InfoDetailUserDto;
    duyet: InfoDetailUserDto;
    boPhanTao: InfoDetailUserDto;
    listCongViecLienQuan?: CongViecLienQuanDto[] | undefined;
    listDoiTuongLienQuan?: DoiTuongLienQuanDto[] | undefined;
    listTieuChi?: TieuChiDto[] | undefined;
    listChildren?: CongViecBasicDto[] | undefined;
    listFile?: FileDto[] | undefined;
    parentId?: string | undefined;
    index?: number;
    order?: number;
    groupCode?: string | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;
}

export class CongViecBaoCaoDto implements ICongViecBaoCaoDto {
    congViecId?: string;
    xepLoai?: CongViecXepLoaiDto;
    action?: string | undefined;

    constructor(data?: ICongViecBaoCaoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.congViecId = _data["congViecId"];
            this.xepLoai = _data["xepLoai"] ? CongViecXepLoaiDto.fromJS(_data["xepLoai"]) : <any>undefined;
            this.action = _data["action"];
        }
    }

    static fromJS(data: any): CongViecBaoCaoDto {
        data = typeof data === 'object' ? data : {};
        let result = new CongViecBaoCaoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["congViecId"] = this.congViecId;
        data["xepLoai"] = this.xepLoai ? this.xepLoai.toJSON() : <any>undefined;
        data["action"] = this.action;
        return data;
    }
}

export interface ICongViecBaoCaoDto {
    congViecId?: string;
    xepLoai?: CongViecXepLoaiDto;
    action?: string | undefined;
}

export class ShareKeyByBaoCaoCongiecDto implements IShareKeyByBaoCaoCongiecDto {
    listBaoCao?: CongViecBaoCaoDto[] | undefined;
    shareKey?: ShareKeyDto;

    constructor(data?: IShareKeyByBaoCaoCongiecDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["listBaoCao"])) {
                this.listBaoCao = [] as any;
                for (let item of _data["listBaoCao"])
                    this.listBaoCao!.push(CongViecBaoCaoDto.fromJS(item));
            }
            this.shareKey = _data["shareKey"] ? ShareKeyDto.fromJS(_data["shareKey"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ShareKeyByBaoCaoCongiecDto {
        data = typeof data === 'object' ? data : {};
        let result = new ShareKeyByBaoCaoCongiecDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.listBaoCao)) {
            data["listBaoCao"] = [];
            for (let item of this.listBaoCao)
                data["listBaoCao"].push(item.toJSON());
        }
        data["shareKey"] = this.shareKey ? this.shareKey.toJSON() : <any>undefined;
        return data;
    }
}

export interface IShareKeyByBaoCaoCongiecDto {
    listBaoCao?: CongViecBaoCaoDto[] | undefined;
    shareKey?: ShareKeyDto;
}

export class ShareKeyByListIdDto implements IShareKeyByListIdDto {
    listId?: string[] | undefined;
    shareKey?: ShareKeyDto;

    constructor(data?: IShareKeyByListIdDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["listId"])) {
                this.listId = [] as any;
                for (let item of _data["listId"])
                    this.listId!.push(item);
            }
            this.shareKey = _data["shareKey"] ? ShareKeyDto.fromJS(_data["shareKey"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ShareKeyByListIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new ShareKeyByListIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.listId)) {
            data["listId"] = [];
            for (let item of this.listId)
                data["listId"].push(item);
        }
        data["shareKey"] = this.shareKey ? this.shareKey.toJSON() : <any>undefined;
        return data;
    }
}

export interface IShareKeyByListIdDto {
    listId?: string[] | undefined;
    shareKey?: ShareKeyDto;
}

export class DataDashboardOutputDto implements IDataDashboardOutputDto {
    parentId?: string | undefined;
    title?: string | undefined;
    categoryName?: string | undefined;
    loaiDinhKy?: string | undefined;
    status?: string | undefined;
    quyTrinhCode?: string | undefined;
    hanHoanThanh?: number | undefined;
    xuLy?: InfoDetailUserDto;
    bool1?: boolean | undefined;
    order?: number;
    code?: string | undefined;
    action?: string | undefined;
    keyData?: string | undefined;
    value3?: string | undefined;
    number1?: number;
    number2?: number;
    listPermission?: string[] | undefined;
    id?: string;

    constructor(data?: IDataDashboardOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.parentId = _data["parentId"];
            this.title = _data["title"];
            this.categoryName = _data["categoryName"];
            this.loaiDinhKy = _data["loaiDinhKy"];
            this.status = _data["status"];
            this.quyTrinhCode = _data["quyTrinhCode"];
            this.hanHoanThanh = _data["hanHoanThanh"];
            this.xuLy = _data["xuLy"] ? InfoDetailUserDto.fromJS(_data["xuLy"]) : <any>undefined;
            this.bool1 = _data["bool1"];
            this.order = _data["order"];
            this.code = _data["code"];
            this.action = _data["action"];
            this.keyData = _data["keyData"];
            this.value3 = _data["value3"];
            this.number1 = _data["number1"];
            this.number2 = _data["number2"];
            if (Array.isArray(_data["listPermission"])) {
                this.listPermission = [] as any;
                for (let item of _data["listPermission"])
                    this.listPermission!.push(item);
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DataDashboardOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new DataDashboardOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["title"] = this.title;
        data["categoryName"] = this.categoryName;
        data["loaiDinhKy"] = this.loaiDinhKy;
        data["status"] = this.status;
        data["quyTrinhCode"] = this.quyTrinhCode;
        data["hanHoanThanh"] = this.hanHoanThanh;
        data["xuLy"] = this.xuLy ? this.xuLy.toJSON() : <any>undefined;
        data["bool1"] = this.bool1;
        data["order"] = this.order;
        data["code"] = this.code;
        data["action"] = this.action;
        data["keyData"] = this.keyData;
        data["value3"] = this.value3;
        data["number1"] = this.number1;
        data["number2"] = this.number2;
        if (Array.isArray(this.listPermission)) {
            data["listPermission"] = [];
            for (let item of this.listPermission)
                data["listPermission"].push(item);
        }
        data["id"] = this.id;
        return data;
    }
}

export interface IDataDashboardOutputDto {
    parentId?: string | undefined;
    title?: string | undefined;
    categoryName?: string | undefined;
    loaiDinhKy?: string | undefined;
    status?: string | undefined;
    quyTrinhCode?: string | undefined;
    hanHoanThanh?: number | undefined;
    xuLy?: InfoDetailUserDto;
    bool1?: boolean | undefined;
    order?: number;
    code?: string | undefined;
    action?: string | undefined;
    keyData?: string | undefined;
    value3?: string | undefined;
    number1?: number;
    number2?: number;
    listPermission?: string[] | undefined;
    id?: string;
}

export class FilterDto implements IFilterDto {
    title?: string | undefined;
    categoryId?: string | undefined;
    status?: string | undefined;
    loaiDinhKy?: string | undefined;
    maQuyTrinh?: string | undefined;
    from?: number | undefined;
    to?: number | undefined;

    constructor(data?: IFilterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.categoryId = _data["categoryId"];
            this.status = _data["status"];
            this.loaiDinhKy = _data["loaiDinhKy"];
            this.maQuyTrinh = _data["maQuyTrinh"];
            this.from = _data["from"];
            this.to = _data["to"];
        }
    }

    static fromJS(data: any): FilterDto {
        data = typeof data === 'object' ? data : {};
        let result = new FilterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["categoryId"] = this.categoryId;
        data["status"] = this.status;
        data["loaiDinhKy"] = this.loaiDinhKy;
        data["maQuyTrinh"] = this.maQuyTrinh;
        data["from"] = this.from;
        data["to"] = this.to;
        return data;
    }
}

export interface IFilterDto {
    title?: string | undefined;
    categoryId?: string | undefined;
    status?: string | undefined;
    loaiDinhKy?: string | undefined;
    maQuyTrinh?: string | undefined;
    from?: number | undefined;
    to?: number | undefined;
}

export class GetDashboardDto implements IGetDashboardDto {
    userBoPhans?: InfoDetailUserDto[] | undefined;
    bac?: number;
    myTask?: boolean;
    boXemCongViecMoi?: boolean;
    viecDangLam?: boolean;
    viecTuongLai?: boolean;
    viecNhanVien?: boolean;
    order?: string | undefined;
    parentId?: string | undefined;
    group?: string | undefined;
    filter?: FilterDto;
    shareKey?: ShareKeyDto;

    constructor(data?: IGetDashboardDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["userBoPhans"])) {
                this.userBoPhans = [] as any;
                for (let item of _data["userBoPhans"])
                    this.userBoPhans!.push(InfoDetailUserDto.fromJS(item));
            }
            this.bac = _data["bac"];
            this.myTask = _data["myTask"];
            this.boXemCongViecMoi = _data["boXemCongViecMoi"];
            this.viecDangLam = _data["viecDangLam"];
            this.viecTuongLai = _data["viecTuongLai"];
            this.viecNhanVien = _data["viecNhanVien"];
            this.order = _data["order"];
            this.parentId = _data["parentId"];
            this.group = _data["group"];
            this.filter = _data["filter"] ? FilterDto.fromJS(_data["filter"]) : <any>undefined;
            this.shareKey = _data["shareKey"] ? ShareKeyDto.fromJS(_data["shareKey"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetDashboardDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetDashboardDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.userBoPhans)) {
            data["userBoPhans"] = [];
            for (let item of this.userBoPhans)
                data["userBoPhans"].push(item.toJSON());
        }
        data["bac"] = this.bac;
        data["myTask"] = this.myTask;
        data["boXemCongViecMoi"] = this.boXemCongViecMoi;
        data["viecDangLam"] = this.viecDangLam;
        data["viecTuongLai"] = this.viecTuongLai;
        data["viecNhanVien"] = this.viecNhanVien;
        data["order"] = this.order;
        data["parentId"] = this.parentId;
        data["group"] = this.group;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["shareKey"] = this.shareKey ? this.shareKey.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetDashboardDto {
    userBoPhans?: InfoDetailUserDto[] | undefined;
    bac?: number;
    myTask?: boolean;
    boXemCongViecMoi?: boolean;
    viecDangLam?: boolean;
    viecTuongLai?: boolean;
    viecNhanVien?: boolean;
    order?: string | undefined;
    parentId?: string | undefined;
    group?: string | undefined;
    filter?: FilterDto;
    shareKey?: ShareKeyDto;
}

export class ViecPhanLoaiDto implements IViecPhanLoaiDto {
    viecCanLams?: DataDashboardOutputDto[] | undefined;
    viecTreHans?: DataDashboardOutputDto[] | undefined;
    viecMoiThayDoiLienQuans?: DataDashboardOutputDto[] | undefined;
    thongBaoMois?: DataDashboardOutputDto[] | undefined;
    viecBaoCaoChoDuyets?: DataDashboardOutputDto[] | undefined;
    viecTamDungKhoiDongChoDuyets?: DataDashboardOutputDto[] | undefined;
    baoCaos?: DataDashboardOutputDto[] | undefined;
    baoCaoChoDuyets?: DataDashboardOutputDto[] | undefined;
    thongBaoChoDuyets?: DataDashboardOutputDto[] | undefined;
    quyTrinhBanGiaoDuLieuChoDuyets?: DataDashboardOutputDto[] | undefined;
    viecDuLieuHoatDongs?: DataDashboardOutputDto[] | undefined;
    xoaChoDuyets?: DataDashboardOutputDto[] | undefined;

    constructor(data?: IViecPhanLoaiDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["viecCanLams"])) {
                this.viecCanLams = [] as any;
                for (let item of _data["viecCanLams"])
                    this.viecCanLams!.push(DataDashboardOutputDto.fromJS(item));
            }
            if (Array.isArray(_data["viecTreHans"])) {
                this.viecTreHans = [] as any;
                for (let item of _data["viecTreHans"])
                    this.viecTreHans!.push(DataDashboardOutputDto.fromJS(item));
            }
            if (Array.isArray(_data["viecMoiThayDoiLienQuans"])) {
                this.viecMoiThayDoiLienQuans = [] as any;
                for (let item of _data["viecMoiThayDoiLienQuans"])
                    this.viecMoiThayDoiLienQuans!.push(DataDashboardOutputDto.fromJS(item));
            }
            if (Array.isArray(_data["thongBaoMois"])) {
                this.thongBaoMois = [] as any;
                for (let item of _data["thongBaoMois"])
                    this.thongBaoMois!.push(DataDashboardOutputDto.fromJS(item));
            }
            if (Array.isArray(_data["viecBaoCaoChoDuyets"])) {
                this.viecBaoCaoChoDuyets = [] as any;
                for (let item of _data["viecBaoCaoChoDuyets"])
                    this.viecBaoCaoChoDuyets!.push(DataDashboardOutputDto.fromJS(item));
            }
            if (Array.isArray(_data["viecTamDungKhoiDongChoDuyets"])) {
                this.viecTamDungKhoiDongChoDuyets = [] as any;
                for (let item of _data["viecTamDungKhoiDongChoDuyets"])
                    this.viecTamDungKhoiDongChoDuyets!.push(DataDashboardOutputDto.fromJS(item));
            }
            if (Array.isArray(_data["baoCaos"])) {
                this.baoCaos = [] as any;
                for (let item of _data["baoCaos"])
                    this.baoCaos!.push(DataDashboardOutputDto.fromJS(item));
            }
            if (Array.isArray(_data["baoCaoChoDuyets"])) {
                this.baoCaoChoDuyets = [] as any;
                for (let item of _data["baoCaoChoDuyets"])
                    this.baoCaoChoDuyets!.push(DataDashboardOutputDto.fromJS(item));
            }
            if (Array.isArray(_data["thongBaoChoDuyets"])) {
                this.thongBaoChoDuyets = [] as any;
                for (let item of _data["thongBaoChoDuyets"])
                    this.thongBaoChoDuyets!.push(DataDashboardOutputDto.fromJS(item));
            }
            if (Array.isArray(_data["quyTrinhBanGiaoDuLieuChoDuyets"])) {
                this.quyTrinhBanGiaoDuLieuChoDuyets = [] as any;
                for (let item of _data["quyTrinhBanGiaoDuLieuChoDuyets"])
                    this.quyTrinhBanGiaoDuLieuChoDuyets!.push(DataDashboardOutputDto.fromJS(item));
            }
            if (Array.isArray(_data["viecDuLieuHoatDongs"])) {
                this.viecDuLieuHoatDongs = [] as any;
                for (let item of _data["viecDuLieuHoatDongs"])
                    this.viecDuLieuHoatDongs!.push(DataDashboardOutputDto.fromJS(item));
            }
            if (Array.isArray(_data["xoaChoDuyets"])) {
                this.xoaChoDuyets = [] as any;
                for (let item of _data["xoaChoDuyets"])
                    this.xoaChoDuyets!.push(DataDashboardOutputDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ViecPhanLoaiDto {
        data = typeof data === 'object' ? data : {};
        let result = new ViecPhanLoaiDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.viecCanLams)) {
            data["viecCanLams"] = [];
            for (let item of this.viecCanLams)
                data["viecCanLams"].push(item.toJSON());
        }
        if (Array.isArray(this.viecTreHans)) {
            data["viecTreHans"] = [];
            for (let item of this.viecTreHans)
                data["viecTreHans"].push(item.toJSON());
        }
        if (Array.isArray(this.viecMoiThayDoiLienQuans)) {
            data["viecMoiThayDoiLienQuans"] = [];
            for (let item of this.viecMoiThayDoiLienQuans)
                data["viecMoiThayDoiLienQuans"].push(item.toJSON());
        }
        if (Array.isArray(this.thongBaoMois)) {
            data["thongBaoMois"] = [];
            for (let item of this.thongBaoMois)
                data["thongBaoMois"].push(item.toJSON());
        }
        if (Array.isArray(this.viecBaoCaoChoDuyets)) {
            data["viecBaoCaoChoDuyets"] = [];
            for (let item of this.viecBaoCaoChoDuyets)
                data["viecBaoCaoChoDuyets"].push(item.toJSON());
        }
        if (Array.isArray(this.viecTamDungKhoiDongChoDuyets)) {
            data["viecTamDungKhoiDongChoDuyets"] = [];
            for (let item of this.viecTamDungKhoiDongChoDuyets)
                data["viecTamDungKhoiDongChoDuyets"].push(item.toJSON());
        }
        if (Array.isArray(this.baoCaos)) {
            data["baoCaos"] = [];
            for (let item of this.baoCaos)
                data["baoCaos"].push(item.toJSON());
        }
        if (Array.isArray(this.baoCaoChoDuyets)) {
            data["baoCaoChoDuyets"] = [];
            for (let item of this.baoCaoChoDuyets)
                data["baoCaoChoDuyets"].push(item.toJSON());
        }
        if (Array.isArray(this.thongBaoChoDuyets)) {
            data["thongBaoChoDuyets"] = [];
            for (let item of this.thongBaoChoDuyets)
                data["thongBaoChoDuyets"].push(item.toJSON());
        }
        if (Array.isArray(this.quyTrinhBanGiaoDuLieuChoDuyets)) {
            data["quyTrinhBanGiaoDuLieuChoDuyets"] = [];
            for (let item of this.quyTrinhBanGiaoDuLieuChoDuyets)
                data["quyTrinhBanGiaoDuLieuChoDuyets"].push(item.toJSON());
        }
        if (Array.isArray(this.viecDuLieuHoatDongs)) {
            data["viecDuLieuHoatDongs"] = [];
            for (let item of this.viecDuLieuHoatDongs)
                data["viecDuLieuHoatDongs"].push(item.toJSON());
        }
        if (Array.isArray(this.xoaChoDuyets)) {
            data["xoaChoDuyets"] = [];
            for (let item of this.xoaChoDuyets)
                data["xoaChoDuyets"].push(item.toJSON());
        }
        return data;
    }
}

export interface IViecPhanLoaiDto {
    viecCanLams?: DataDashboardOutputDto[] | undefined;
    viecTreHans?: DataDashboardOutputDto[] | undefined;
    viecMoiThayDoiLienQuans?: DataDashboardOutputDto[] | undefined;
    thongBaoMois?: DataDashboardOutputDto[] | undefined;
    viecBaoCaoChoDuyets?: DataDashboardOutputDto[] | undefined;
    viecTamDungKhoiDongChoDuyets?: DataDashboardOutputDto[] | undefined;
    baoCaos?: DataDashboardOutputDto[] | undefined;
    baoCaoChoDuyets?: DataDashboardOutputDto[] | undefined;
    thongBaoChoDuyets?: DataDashboardOutputDto[] | undefined;
    quyTrinhBanGiaoDuLieuChoDuyets?: DataDashboardOutputDto[] | undefined;
    viecDuLieuHoatDongs?: DataDashboardOutputDto[] | undefined;
    xoaChoDuyets?: DataDashboardOutputDto[] | undefined;
}

export class CongViecQuyTrinhDto implements ICongViecQuyTrinhDto {
    title!: string;
    parentId?: string | undefined;
    doBaoMat?: number;
    doUuTien?: number;
    thoiGianThucHien?: number;
    loaiCongViecId?: string;
    giamSat!: InfoDetailUserDto;
    xuLy!: InfoDetailUserDto;
    duyet!: InfoDetailUserDto;
    boPhanTao!: InfoDetailUserDto;
    kieuTao?: string | undefined;
    loaiHoanThanh?: string | undefined;
    soNgayTao?: number;
    buoc?: string | undefined;
    children?: CongViecQuyTrinhDto[] | undefined;
    id?: string;

    constructor(data?: ICongViecQuyTrinhDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.giamSat = new InfoDetailUserDto();
            this.xuLy = new InfoDetailUserDto();
            this.duyet = new InfoDetailUserDto();
            this.boPhanTao = new InfoDetailUserDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.parentId = _data["parentId"];
            this.doBaoMat = _data["doBaoMat"];
            this.doUuTien = _data["doUuTien"];
            this.thoiGianThucHien = _data["thoiGianThucHien"];
            this.loaiCongViecId = _data["loaiCongViecId"];
            this.giamSat = _data["giamSat"] ? InfoDetailUserDto.fromJS(_data["giamSat"]) : new InfoDetailUserDto();
            this.xuLy = _data["xuLy"] ? InfoDetailUserDto.fromJS(_data["xuLy"]) : new InfoDetailUserDto();
            this.duyet = _data["duyet"] ? InfoDetailUserDto.fromJS(_data["duyet"]) : new InfoDetailUserDto();
            this.boPhanTao = _data["boPhanTao"] ? InfoDetailUserDto.fromJS(_data["boPhanTao"]) : new InfoDetailUserDto();
            this.kieuTao = _data["kieuTao"];
            this.loaiHoanThanh = _data["loaiHoanThanh"];
            this.soNgayTao = _data["soNgayTao"];
            this.buoc = _data["buoc"];
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(CongViecQuyTrinhDto.fromJS(item));
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CongViecQuyTrinhDto {
        data = typeof data === 'object' ? data : {};
        let result = new CongViecQuyTrinhDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["parentId"] = this.parentId;
        data["doBaoMat"] = this.doBaoMat;
        data["doUuTien"] = this.doUuTien;
        data["thoiGianThucHien"] = this.thoiGianThucHien;
        data["loaiCongViecId"] = this.loaiCongViecId;
        data["giamSat"] = this.giamSat ? this.giamSat.toJSON() : <any>undefined;
        data["xuLy"] = this.xuLy ? this.xuLy.toJSON() : <any>undefined;
        data["duyet"] = this.duyet ? this.duyet.toJSON() : <any>undefined;
        data["boPhanTao"] = this.boPhanTao ? this.boPhanTao.toJSON() : <any>undefined;
        data["kieuTao"] = this.kieuTao;
        data["loaiHoanThanh"] = this.loaiHoanThanh;
        data["soNgayTao"] = this.soNgayTao;
        data["buoc"] = this.buoc;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data;
    }
}

export interface ICongViecQuyTrinhDto {
    title: string;
    parentId?: string | undefined;
    doBaoMat?: number;
    doUuTien?: number;
    thoiGianThucHien?: number;
    loaiCongViecId?: string;
    giamSat: InfoDetailUserDto;
    xuLy: InfoDetailUserDto;
    duyet: InfoDetailUserDto;
    boPhanTao: InfoDetailUserDto;
    kieuTao?: string | undefined;
    loaiHoanThanh?: string | undefined;
    soNgayTao?: number;
    buoc?: string | undefined;
    children?: CongViecQuyTrinhDto[] | undefined;
    id?: string;
}

export class QuyTrinhDto implements IQuyTrinhDto {
    title!: string;
    content?: string | undefined;
    isActive?: boolean;
    quyTrinhThayTheId?: string | undefined;
    hanHieuLuc?: number | undefined;
    duyet?: InfoDetailUserDto;
    boPhanTao?: InfoDetailUserDto;
    listFile?: FileDto[] | undefined;
    listCongViec?: CongViecQuyTrinhDto[] | undefined;
    listPermission?: string[] | undefined;
    loaiQuyTrinh?: string | undefined;
    shareKey?: ShareKeyDto;
    parentId?: string | undefined;
    index?: number;
    order?: number;
    groupCode?: string | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;

    constructor(data?: IQuyTrinhDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.content = _data["content"];
            this.isActive = _data["isActive"];
            this.quyTrinhThayTheId = _data["quyTrinhThayTheId"];
            this.hanHieuLuc = _data["hanHieuLuc"];
            this.duyet = _data["duyet"] ? InfoDetailUserDto.fromJS(_data["duyet"]) : <any>undefined;
            this.boPhanTao = _data["boPhanTao"] ? InfoDetailUserDto.fromJS(_data["boPhanTao"]) : <any>undefined;
            if (Array.isArray(_data["listFile"])) {
                this.listFile = [] as any;
                for (let item of _data["listFile"])
                    this.listFile!.push(FileDto.fromJS(item));
            }
            if (Array.isArray(_data["listCongViec"])) {
                this.listCongViec = [] as any;
                for (let item of _data["listCongViec"])
                    this.listCongViec!.push(CongViecQuyTrinhDto.fromJS(item));
            }
            if (Array.isArray(_data["listPermission"])) {
                this.listPermission = [] as any;
                for (let item of _data["listPermission"])
                    this.listPermission!.push(item);
            }
            this.loaiQuyTrinh = _data["loaiQuyTrinh"];
            this.shareKey = _data["shareKey"] ? ShareKeyDto.fromJS(_data["shareKey"]) : <any>undefined;
            this.parentId = _data["parentId"];
            this.index = _data["index"];
            this.order = _data["order"];
            this.groupCode = _data["groupCode"];
            this.value1 = _data["value1"];
            this.value2 = _data["value2"];
            this.value3 = _data["value3"];
            this.value4 = _data["value4"];
            this.value5 = _data["value5"];
            this.value6 = _data["value6"];
            this.value7 = _data["value7"];
            this.value8 = _data["value8"];
            this.value9 = _data["value9"];
            this.value10 = _data["value10"];
            this.number1 = _data["number1"];
            this.number2 = _data["number2"];
            this.number3 = _data["number3"];
            this.number4 = _data["number4"];
            this.number5 = _data["number5"];
            this.number6 = _data["number6"];
            this.number7 = _data["number7"];
            this.number8 = _data["number8"];
            this.number9 = _data["number9"];
            this.number10 = _data["number10"];
            this.bool1 = _data["bool1"];
            this.bool2 = _data["bool2"];
            this.bool3 = _data["bool3"];
            this.bool4 = _data["bool4"];
            this.bool5 = _data["bool5"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.codeData = _data["codeData"];
            this.valueData = _data["valueData"];
            this.category = _data["category"];
            this.permissions = _data["permissions"];
            this.language = _data["language"];
            this.tenantId = _data["tenantId"];
            this.status = _data["status"];
            this.hideValue = _data["hideValue"];
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): QuyTrinhDto {
        data = typeof data === 'object' ? data : {};
        let result = new QuyTrinhDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["content"] = this.content;
        data["isActive"] = this.isActive;
        data["quyTrinhThayTheId"] = this.quyTrinhThayTheId;
        data["hanHieuLuc"] = this.hanHieuLuc;
        data["duyet"] = this.duyet ? this.duyet.toJSON() : <any>undefined;
        data["boPhanTao"] = this.boPhanTao ? this.boPhanTao.toJSON() : <any>undefined;
        if (Array.isArray(this.listFile)) {
            data["listFile"] = [];
            for (let item of this.listFile)
                data["listFile"].push(item.toJSON());
        }
        if (Array.isArray(this.listCongViec)) {
            data["listCongViec"] = [];
            for (let item of this.listCongViec)
                data["listCongViec"].push(item.toJSON());
        }
        if (Array.isArray(this.listPermission)) {
            data["listPermission"] = [];
            for (let item of this.listPermission)
                data["listPermission"].push(item);
        }
        data["loaiQuyTrinh"] = this.loaiQuyTrinh;
        data["shareKey"] = this.shareKey ? this.shareKey.toJSON() : <any>undefined;
        data["parentId"] = this.parentId;
        data["index"] = this.index;
        data["order"] = this.order;
        data["groupCode"] = this.groupCode;
        data["value1"] = this.value1;
        data["value2"] = this.value2;
        data["value3"] = this.value3;
        data["value4"] = this.value4;
        data["value5"] = this.value5;
        data["value6"] = this.value6;
        data["value7"] = this.value7;
        data["value8"] = this.value8;
        data["value9"] = this.value9;
        data["value10"] = this.value10;
        data["number1"] = this.number1;
        data["number2"] = this.number2;
        data["number3"] = this.number3;
        data["number4"] = this.number4;
        data["number5"] = this.number5;
        data["number6"] = this.number6;
        data["number7"] = this.number7;
        data["number8"] = this.number8;
        data["number9"] = this.number9;
        data["number10"] = this.number10;
        data["bool1"] = this.bool1;
        data["bool2"] = this.bool2;
        data["bool3"] = this.bool3;
        data["bool4"] = this.bool4;
        data["bool5"] = this.bool5;
        data["name"] = this.name;
        data["code"] = this.code;
        data["codeData"] = this.codeData;
        data["valueData"] = this.valueData;
        data["category"] = this.category;
        data["permissions"] = this.permissions;
        data["language"] = this.language;
        data["tenantId"] = this.tenantId;
        data["status"] = this.status;
        data["hideValue"] = this.hideValue;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IQuyTrinhDto {
    title: string;
    content?: string | undefined;
    isActive?: boolean;
    quyTrinhThayTheId?: string | undefined;
    hanHieuLuc?: number | undefined;
    duyet?: InfoDetailUserDto;
    boPhanTao?: InfoDetailUserDto;
    listFile?: FileDto[] | undefined;
    listCongViec?: CongViecQuyTrinhDto[] | undefined;
    listPermission?: string[] | undefined;
    loaiQuyTrinh?: string | undefined;
    shareKey?: ShareKeyDto;
    parentId?: string | undefined;
    index?: number;
    order?: number;
    groupCode?: string | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;
}

export class SearchQuyTrinhDto implements ISearchQuyTrinhDto {
    listUserBoPhan?: InfoDetailUserDto[] | undefined;
    hanHieuLuc?: number | undefined;
    level?: number | undefined;
    shareKey?: ShareKeyDto;
    tenantId?: number | undefined;
    userId?: number | undefined;
    id?: string;
    language?: string | undefined;
    option?: string | undefined;
    search?: string | undefined;
    status?: string | undefined;
    from?: Date | undefined;
    to?: Date | undefined;
    sValue?: string[] | undefined;
    lValue?: number[] | undefined;
    gValue?: string[] | undefined;
    dValue?: number[] | undefined;
    tValue?: Date[] | undefined;
    criterias?: CriteriaRequestDto[] | undefined;
    sorting?: string | undefined;
    skipCount?: number;
    maxResultCount?: number;

    constructor(data?: ISearchQuyTrinhDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["listUserBoPhan"])) {
                this.listUserBoPhan = [] as any;
                for (let item of _data["listUserBoPhan"])
                    this.listUserBoPhan!.push(InfoDetailUserDto.fromJS(item));
            }
            this.hanHieuLuc = _data["hanHieuLuc"];
            this.level = _data["level"];
            this.shareKey = _data["shareKey"] ? ShareKeyDto.fromJS(_data["shareKey"]) : <any>undefined;
            this.tenantId = _data["tenantId"];
            this.userId = _data["userId"];
            this.id = _data["id"];
            this.language = _data["language"];
            this.option = _data["option"];
            this.search = _data["search"];
            this.status = _data["status"];
            this.from = _data["from"] ? new Date(_data["from"].toString()) : <any>undefined;
            this.to = _data["to"] ? new Date(_data["to"].toString()) : <any>undefined;
            if (Array.isArray(_data["sValue"])) {
                this.sValue = [] as any;
                for (let item of _data["sValue"])
                    this.sValue!.push(item);
            }
            if (Array.isArray(_data["lValue"])) {
                this.lValue = [] as any;
                for (let item of _data["lValue"])
                    this.lValue!.push(item);
            }
            if (Array.isArray(_data["gValue"])) {
                this.gValue = [] as any;
                for (let item of _data["gValue"])
                    this.gValue!.push(item);
            }
            if (Array.isArray(_data["dValue"])) {
                this.dValue = [] as any;
                for (let item of _data["dValue"])
                    this.dValue!.push(item);
            }
            if (Array.isArray(_data["tValue"])) {
                this.tValue = [] as any;
                for (let item of _data["tValue"])
                    this.tValue!.push(new Date(item));
            }
            if (Array.isArray(_data["criterias"])) {
                this.criterias = [] as any;
                for (let item of _data["criterias"])
                    this.criterias!.push(CriteriaRequestDto.fromJS(item));
            }
            this.sorting = _data["sorting"];
            this.skipCount = _data["skipCount"];
            this.maxResultCount = _data["maxResultCount"];
        }
    }

    static fromJS(data: any): SearchQuyTrinhDto {
        data = typeof data === 'object' ? data : {};
        let result = new SearchQuyTrinhDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.listUserBoPhan)) {
            data["listUserBoPhan"] = [];
            for (let item of this.listUserBoPhan)
                data["listUserBoPhan"].push(item.toJSON());
        }
        data["hanHieuLuc"] = this.hanHieuLuc;
        data["level"] = this.level;
        data["shareKey"] = this.shareKey ? this.shareKey.toJSON() : <any>undefined;
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["id"] = this.id;
        data["language"] = this.language;
        data["option"] = this.option;
        data["search"] = this.search;
        data["status"] = this.status;
        data["from"] = this.from ? this.from.toISOString() : <any>undefined;
        data["to"] = this.to ? this.to.toISOString() : <any>undefined;
        if (Array.isArray(this.sValue)) {
            data["sValue"] = [];
            for (let item of this.sValue)
                data["sValue"].push(item);
        }
        if (Array.isArray(this.lValue)) {
            data["lValue"] = [];
            for (let item of this.lValue)
                data["lValue"].push(item);
        }
        if (Array.isArray(this.gValue)) {
            data["gValue"] = [];
            for (let item of this.gValue)
                data["gValue"].push(item);
        }
        if (Array.isArray(this.dValue)) {
            data["dValue"] = [];
            for (let item of this.dValue)
                data["dValue"].push(item);
        }
        if (Array.isArray(this.tValue)) {
            data["tValue"] = [];
            for (let item of this.tValue)
                data["tValue"].push(item.toISOString());
        }
        if (Array.isArray(this.criterias)) {
            data["criterias"] = [];
            for (let item of this.criterias)
                data["criterias"].push(item.toJSON());
        }
        data["sorting"] = this.sorting;
        data["skipCount"] = this.skipCount;
        data["maxResultCount"] = this.maxResultCount;
        return data;
    }
}

export interface ISearchQuyTrinhDto {
    listUserBoPhan?: InfoDetailUserDto[] | undefined;
    hanHieuLuc?: number | undefined;
    level?: number | undefined;
    shareKey?: ShareKeyDto;
    tenantId?: number | undefined;
    userId?: number | undefined;
    id?: string;
    language?: string | undefined;
    option?: string | undefined;
    search?: string | undefined;
    status?: string | undefined;
    from?: Date | undefined;
    to?: Date | undefined;
    sValue?: string[] | undefined;
    lValue?: number[] | undefined;
    gValue?: string[] | undefined;
    dValue?: number[] | undefined;
    tValue?: Date[] | undefined;
    criterias?: CriteriaRequestDto[] | undefined;
    sorting?: string | undefined;
    skipCount?: number;
    maxResultCount?: number;
}

export class QuyTrinhBasicDto implements IQuyTrinhBasicDto {
    code?: string | undefined;
    title?: string | undefined;
    duyet?: InfoDetailUserDto;
    hanHieuLuc?: number | undefined;
    status?: string | undefined;
    id?: string;

    constructor(data?: IQuyTrinhBasicDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.title = _data["title"];
            this.duyet = _data["duyet"] ? InfoDetailUserDto.fromJS(_data["duyet"]) : <any>undefined;
            this.hanHieuLuc = _data["hanHieuLuc"];
            this.status = _data["status"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): QuyTrinhBasicDto {
        data = typeof data === 'object' ? data : {};
        let result = new QuyTrinhBasicDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["title"] = this.title;
        data["duyet"] = this.duyet ? this.duyet.toJSON() : <any>undefined;
        data["hanHieuLuc"] = this.hanHieuLuc;
        data["status"] = this.status;
        data["id"] = this.id;
        return data;
    }
}

export interface IQuyTrinhBasicDto {
    code?: string | undefined;
    title?: string | undefined;
    duyet?: InfoDetailUserDto;
    hanHieuLuc?: number | undefined;
    status?: string | undefined;
    id?: string;
}

export class QuyTrinhBasicDtoPagedResultDto implements IQuyTrinhBasicDtoPagedResultDto {
    totalCount?: number;
    items?: QuyTrinhBasicDto[] | undefined;

    constructor(data?: IQuyTrinhBasicDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(QuyTrinhBasicDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): QuyTrinhBasicDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new QuyTrinhBasicDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IQuyTrinhBasicDtoPagedResultDto {
    totalCount?: number;
    items?: QuyTrinhBasicDto[] | undefined;
}

export class SearchCongViecOutputDto implements ISearchCongViecOutputDto {
    creatorUserId?: number | undefined;
    creationTime?: Date;
    title?: string | undefined;
    loaiCongViecId?: string;
    thoiGianThucHien?: number;
    hanHoanThanh?: number | undefined;
    quyTrinhCode?: string | undefined;
    congViecDinhKy?: CongViecDinhKyDto;
    giamSat?: InfoDetailUserDto;
    xuLy?: InfoDetailUserDto;
    duyet?: InfoDetailUserDto;
    duyetCongViecMoi?: InfoDetailUserDto;
    boPhanTao?: InfoDetailUserDto;
    hoanThanh?: InfoDetailUserDto;
    duyetHoanThanh?: InfoDetailUserDto;
    listChildren?: SearchCongViecOutputDto[] | undefined;
    parentId?: string | undefined;
    parentTitle?: string | undefined;
    categoryName?: string | undefined;
    loaiDinhKy?: string | undefined;
    thuDinhKy?: string | undefined;
    status?: string | undefined;
    thoiGianHoanThanhThucTe?: number | undefined;
    order?: number;
    code?: string | undefined;
    action?: string | undefined;
    number1?: number;
    value2?: string | undefined;
    loaiViec?: string | undefined;
    loaiViec1?: string | undefined;
    thuTuHienThi?: string | undefined;
    trangThai?: string | undefined;
    thoiLuongChiDinh?: number | undefined;
    titles?: string[] | undefined;
    id?: string;

    constructor(data?: ISearchCongViecOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.title = _data["title"];
            this.loaiCongViecId = _data["loaiCongViecId"];
            this.thoiGianThucHien = _data["thoiGianThucHien"];
            this.hanHoanThanh = _data["hanHoanThanh"];
            this.quyTrinhCode = _data["quyTrinhCode"];
            this.congViecDinhKy = _data["congViecDinhKy"] ? CongViecDinhKyDto.fromJS(_data["congViecDinhKy"]) : <any>undefined;
            this.giamSat = _data["giamSat"] ? InfoDetailUserDto.fromJS(_data["giamSat"]) : <any>undefined;
            this.xuLy = _data["xuLy"] ? InfoDetailUserDto.fromJS(_data["xuLy"]) : <any>undefined;
            this.duyet = _data["duyet"] ? InfoDetailUserDto.fromJS(_data["duyet"]) : <any>undefined;
            this.duyetCongViecMoi = _data["duyetCongViecMoi"] ? InfoDetailUserDto.fromJS(_data["duyetCongViecMoi"]) : <any>undefined;
            this.boPhanTao = _data["boPhanTao"] ? InfoDetailUserDto.fromJS(_data["boPhanTao"]) : <any>undefined;
            this.hoanThanh = _data["hoanThanh"] ? InfoDetailUserDto.fromJS(_data["hoanThanh"]) : <any>undefined;
            this.duyetHoanThanh = _data["duyetHoanThanh"] ? InfoDetailUserDto.fromJS(_data["duyetHoanThanh"]) : <any>undefined;
            if (Array.isArray(_data["listChildren"])) {
                this.listChildren = [] as any;
                for (let item of _data["listChildren"])
                    this.listChildren!.push(SearchCongViecOutputDto.fromJS(item));
            }
            this.parentId = _data["parentId"];
            this.parentTitle = _data["parentTitle"];
            this.categoryName = _data["categoryName"];
            this.loaiDinhKy = _data["loaiDinhKy"];
            this.thuDinhKy = _data["thuDinhKy"];
            this.status = _data["status"];
            this.thoiGianHoanThanhThucTe = _data["thoiGianHoanThanhThucTe"];
            this.order = _data["order"];
            this.code = _data["code"];
            this.action = _data["action"];
            this.number1 = _data["number1"];
            this.value2 = _data["value2"];
            this.loaiViec = _data["loaiViec"];
            this.loaiViec1 = _data["loaiViec1"];
            this.thuTuHienThi = _data["thuTuHienThi"];
            this.trangThai = _data["trangThai"];
            this.thoiLuongChiDinh = _data["thoiLuongChiDinh"];
            if (Array.isArray(_data["titles"])) {
                this.titles = [] as any;
                for (let item of _data["titles"])
                    this.titles!.push(item);
            }
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): SearchCongViecOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new SearchCongViecOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["title"] = this.title;
        data["loaiCongViecId"] = this.loaiCongViecId;
        data["thoiGianThucHien"] = this.thoiGianThucHien;
        data["hanHoanThanh"] = this.hanHoanThanh;
        data["quyTrinhCode"] = this.quyTrinhCode;
        data["congViecDinhKy"] = this.congViecDinhKy ? this.congViecDinhKy.toJSON() : <any>undefined;
        data["giamSat"] = this.giamSat ? this.giamSat.toJSON() : <any>undefined;
        data["xuLy"] = this.xuLy ? this.xuLy.toJSON() : <any>undefined;
        data["duyet"] = this.duyet ? this.duyet.toJSON() : <any>undefined;
        data["duyetCongViecMoi"] = this.duyetCongViecMoi ? this.duyetCongViecMoi.toJSON() : <any>undefined;
        data["boPhanTao"] = this.boPhanTao ? this.boPhanTao.toJSON() : <any>undefined;
        data["hoanThanh"] = this.hoanThanh ? this.hoanThanh.toJSON() : <any>undefined;
        data["duyetHoanThanh"] = this.duyetHoanThanh ? this.duyetHoanThanh.toJSON() : <any>undefined;
        if (Array.isArray(this.listChildren)) {
            data["listChildren"] = [];
            for (let item of this.listChildren)
                data["listChildren"].push(item.toJSON());
        }
        data["parentId"] = this.parentId;
        data["parentTitle"] = this.parentTitle;
        data["categoryName"] = this.categoryName;
        data["loaiDinhKy"] = this.loaiDinhKy;
        data["thuDinhKy"] = this.thuDinhKy;
        data["status"] = this.status;
        data["thoiGianHoanThanhThucTe"] = this.thoiGianHoanThanhThucTe;
        data["order"] = this.order;
        data["code"] = this.code;
        data["action"] = this.action;
        data["number1"] = this.number1;
        data["value2"] = this.value2;
        data["loaiViec"] = this.loaiViec;
        data["loaiViec1"] = this.loaiViec1;
        data["thuTuHienThi"] = this.thuTuHienThi;
        data["trangThai"] = this.trangThai;
        data["thoiLuongChiDinh"] = this.thoiLuongChiDinh;
        if (Array.isArray(this.titles)) {
            data["titles"] = [];
            for (let item of this.titles)
                data["titles"].push(item);
        }
        data["id"] = this.id;
        return data;
    }
}

export interface ISearchCongViecOutputDto {
    creatorUserId?: number | undefined;
    creationTime?: Date;
    title?: string | undefined;
    loaiCongViecId?: string;
    thoiGianThucHien?: number;
    hanHoanThanh?: number | undefined;
    quyTrinhCode?: string | undefined;
    congViecDinhKy?: CongViecDinhKyDto;
    giamSat?: InfoDetailUserDto;
    xuLy?: InfoDetailUserDto;
    duyet?: InfoDetailUserDto;
    duyetCongViecMoi?: InfoDetailUserDto;
    boPhanTao?: InfoDetailUserDto;
    hoanThanh?: InfoDetailUserDto;
    duyetHoanThanh?: InfoDetailUserDto;
    listChildren?: SearchCongViecOutputDto[] | undefined;
    parentId?: string | undefined;
    parentTitle?: string | undefined;
    categoryName?: string | undefined;
    loaiDinhKy?: string | undefined;
    thuDinhKy?: string | undefined;
    status?: string | undefined;
    thoiGianHoanThanhThucTe?: number | undefined;
    order?: number;
    code?: string | undefined;
    action?: string | undefined;
    number1?: number;
    value2?: string | undefined;
    loaiViec?: string | undefined;
    loaiViec1?: string | undefined;
    thuTuHienThi?: string | undefined;
    trangThai?: string | undefined;
    thoiLuongChiDinh?: number | undefined;
    titles?: string[] | undefined;
    id?: string;
}

export enum CellValues {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
}

export class SettingItemDto implements ISettingItemDto {
    name?: string | undefined;
    map?: string | undefined;
    type?: string | undefined;
    typeData?: CellValues;
    format?: string | undefined;
    children?: SettingItemDto[] | undefined;
    formula?: string | undefined;
    code?: string | undefined;
    addressName?: string | undefined;

    constructor(data?: ISettingItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.map = _data["map"];
            this.type = _data["type"];
            this.typeData = _data["typeData"];
            this.format = _data["format"];
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(SettingItemDto.fromJS(item));
            }
            this.formula = _data["formula"];
            this.code = _data["code"];
            this.addressName = _data["addressName"];
        }
    }

    static fromJS(data: any): SettingItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new SettingItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["map"] = this.map;
        data["type"] = this.type;
        data["typeData"] = this.typeData;
        data["format"] = this.format;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        data["formula"] = this.formula;
        data["code"] = this.code;
        data["addressName"] = this.addressName;
        return data;
    }
}

export interface ISettingItemDto {
    name?: string | undefined;
    map?: string | undefined;
    type?: string | undefined;
    typeData?: CellValues;
    format?: string | undefined;
    children?: SettingItemDto[] | undefined;
    formula?: string | undefined;
    code?: string | undefined;
    addressName?: string | undefined;
}

export class SettingItemTemplateDto implements ISettingItemTemplateDto {
    sheetName?: string | undefined;
    listSettingItem?: SettingItemDto[] | undefined;

    constructor(data?: ISettingItemTemplateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sheetName = _data["sheetName"];
            if (Array.isArray(_data["listSettingItem"])) {
                this.listSettingItem = [] as any;
                for (let item of _data["listSettingItem"])
                    this.listSettingItem!.push(SettingItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SettingItemTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new SettingItemTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sheetName"] = this.sheetName;
        if (Array.isArray(this.listSettingItem)) {
            data["listSettingItem"] = [];
            for (let item of this.listSettingItem)
                data["listSettingItem"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISettingItemTemplateDto {
    sheetName?: string | undefined;
    listSettingItem?: SettingItemDto[] | undefined;
}

export class SearchInputDto implements ISearchInputDto {
    templateName?: string | undefined;
    skipCount?: number;
    maxResultCount?: number;
    from?: number | undefined;
    to?: number | undefined;
    loaiViecs?: string[] | undefined;
    hasGetLienQuan?: boolean;
    listSettingItemTemplate?: SettingItemTemplateDto[] | undefined;
    userBoPhans?: InfoDetailUserDto[] | undefined;
    bac?: number;
    myTask?: boolean;
    boXemCongViecMoi?: boolean;
    viecDangLam?: boolean;
    viecTuongLai?: boolean;
    viecNhanVien?: boolean;
    order?: string | undefined;
    parentId?: string | undefined;
    group?: string | undefined;
    filter?: FilterDto;
    shareKey?: ShareKeyDto;

    constructor(data?: ISearchInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.templateName = _data["templateName"];
            this.skipCount = _data["skipCount"];
            this.maxResultCount = _data["maxResultCount"];
            this.from = _data["from"];
            this.to = _data["to"];
            if (Array.isArray(_data["loaiViecs"])) {
                this.loaiViecs = [] as any;
                for (let item of _data["loaiViecs"])
                    this.loaiViecs!.push(item);
            }
            this.hasGetLienQuan = _data["hasGetLienQuan"];
            if (Array.isArray(_data["listSettingItemTemplate"])) {
                this.listSettingItemTemplate = [] as any;
                for (let item of _data["listSettingItemTemplate"])
                    this.listSettingItemTemplate!.push(SettingItemTemplateDto.fromJS(item));
            }
            if (Array.isArray(_data["userBoPhans"])) {
                this.userBoPhans = [] as any;
                for (let item of _data["userBoPhans"])
                    this.userBoPhans!.push(InfoDetailUserDto.fromJS(item));
            }
            this.bac = _data["bac"];
            this.myTask = _data["myTask"];
            this.boXemCongViecMoi = _data["boXemCongViecMoi"];
            this.viecDangLam = _data["viecDangLam"];
            this.viecTuongLai = _data["viecTuongLai"];
            this.viecNhanVien = _data["viecNhanVien"];
            this.order = _data["order"];
            this.parentId = _data["parentId"];
            this.group = _data["group"];
            this.filter = _data["filter"] ? FilterDto.fromJS(_data["filter"]) : <any>undefined;
            this.shareKey = _data["shareKey"] ? ShareKeyDto.fromJS(_data["shareKey"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SearchInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new SearchInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["templateName"] = this.templateName;
        data["skipCount"] = this.skipCount;
        data["maxResultCount"] = this.maxResultCount;
        data["from"] = this.from;
        data["to"] = this.to;
        if (Array.isArray(this.loaiViecs)) {
            data["loaiViecs"] = [];
            for (let item of this.loaiViecs)
                data["loaiViecs"].push(item);
        }
        data["hasGetLienQuan"] = this.hasGetLienQuan;
        if (Array.isArray(this.listSettingItemTemplate)) {
            data["listSettingItemTemplate"] = [];
            for (let item of this.listSettingItemTemplate)
                data["listSettingItemTemplate"].push(item.toJSON());
        }
        if (Array.isArray(this.userBoPhans)) {
            data["userBoPhans"] = [];
            for (let item of this.userBoPhans)
                data["userBoPhans"].push(item.toJSON());
        }
        data["bac"] = this.bac;
        data["myTask"] = this.myTask;
        data["boXemCongViecMoi"] = this.boXemCongViecMoi;
        data["viecDangLam"] = this.viecDangLam;
        data["viecTuongLai"] = this.viecTuongLai;
        data["viecNhanVien"] = this.viecNhanVien;
        data["order"] = this.order;
        data["parentId"] = this.parentId;
        data["group"] = this.group;
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["shareKey"] = this.shareKey ? this.shareKey.toJSON() : <any>undefined;
        return data;
    }
}

export interface ISearchInputDto {
    templateName?: string | undefined;
    skipCount?: number;
    maxResultCount?: number;
    from?: number | undefined;
    to?: number | undefined;
    loaiViecs?: string[] | undefined;
    hasGetLienQuan?: boolean;
    listSettingItemTemplate?: SettingItemTemplateDto[] | undefined;
    userBoPhans?: InfoDetailUserDto[] | undefined;
    bac?: number;
    myTask?: boolean;
    boXemCongViecMoi?: boolean;
    viecDangLam?: boolean;
    viecTuongLai?: boolean;
    viecNhanVien?: boolean;
    order?: string | undefined;
    parentId?: string | undefined;
    group?: string | undefined;
    filter?: FilterDto;
    shareKey?: ShareKeyDto;
}

export class SearchCongViecOutputDtoPagedResultDto implements ISearchCongViecOutputDtoPagedResultDto {
    totalCount?: number;
    items?: SearchCongViecOutputDto[] | undefined;

    constructor(data?: ISearchCongViecOutputDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(SearchCongViecOutputDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SearchCongViecOutputDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new SearchCongViecOutputDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISearchCongViecOutputDtoPagedResultDto {
    totalCount?: number;
    items?: SearchCongViecOutputDto[] | undefined;
}

export class SearchThongBaoOutputDto implements ISearchThongBaoOutputDto {
    categoryName?: string | undefined;
    statusName?: string | undefined;
    title!: string;
    loaiThongBaoId!: string;
    ngayBatDau!: number;
    ngayKetThuc!: number;
    duyet!: InfoDetailUserDto;
    boPhanTao!: InfoDetailUserDto;
    status?: string | undefined;
    id?: string;

    constructor(data?: ISearchThongBaoOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.duyet = new InfoDetailUserDto();
            this.boPhanTao = new InfoDetailUserDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.categoryName = _data["categoryName"];
            this.statusName = _data["statusName"];
            this.title = _data["title"];
            this.loaiThongBaoId = _data["loaiThongBaoId"];
            this.ngayBatDau = _data["ngayBatDau"];
            this.ngayKetThuc = _data["ngayKetThuc"];
            this.duyet = _data["duyet"] ? InfoDetailUserDto.fromJS(_data["duyet"]) : new InfoDetailUserDto();
            this.boPhanTao = _data["boPhanTao"] ? InfoDetailUserDto.fromJS(_data["boPhanTao"]) : new InfoDetailUserDto();
            this.status = _data["status"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): SearchThongBaoOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new SearchThongBaoOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryName"] = this.categoryName;
        data["statusName"] = this.statusName;
        data["title"] = this.title;
        data["loaiThongBaoId"] = this.loaiThongBaoId;
        data["ngayBatDau"] = this.ngayBatDau;
        data["ngayKetThuc"] = this.ngayKetThuc;
        data["duyet"] = this.duyet ? this.duyet.toJSON() : <any>undefined;
        data["boPhanTao"] = this.boPhanTao ? this.boPhanTao.toJSON() : <any>undefined;
        data["status"] = this.status;
        data["id"] = this.id;
        return data;
    }
}

export interface ISearchThongBaoOutputDto {
    categoryName?: string | undefined;
    statusName?: string | undefined;
    title: string;
    loaiThongBaoId: string;
    ngayBatDau: number;
    ngayKetThuc: number;
    duyet: InfoDetailUserDto;
    boPhanTao: InfoDetailUserDto;
    status?: string | undefined;
    id?: string;
}

export class SearchThongBaoOutputDtoPagedResultDto implements ISearchThongBaoOutputDtoPagedResultDto {
    totalCount?: number;
    items?: SearchThongBaoOutputDto[] | undefined;

    constructor(data?: ISearchThongBaoOutputDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(SearchThongBaoOutputDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SearchThongBaoOutputDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new SearchThongBaoOutputDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISearchThongBaoOutputDtoPagedResultDto {
    totalCount?: number;
    items?: SearchThongBaoOutputDto[] | undefined;
}

export class SettingDto implements ISettingDto {
    userId?: number | undefined;
    value?: string | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;

    constructor(data?: ISettingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.value = _data["value"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.codeData = _data["codeData"];
            this.valueData = _data["valueData"];
            this.category = _data["category"];
            this.permissions = _data["permissions"];
            this.language = _data["language"];
            this.tenantId = _data["tenantId"];
            this.status = _data["status"];
            this.hideValue = _data["hideValue"];
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): SettingDto {
        data = typeof data === 'object' ? data : {};
        let result = new SettingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["value"] = this.value;
        data["name"] = this.name;
        data["code"] = this.code;
        data["codeData"] = this.codeData;
        data["valueData"] = this.valueData;
        data["category"] = this.category;
        data["permissions"] = this.permissions;
        data["language"] = this.language;
        data["tenantId"] = this.tenantId;
        data["status"] = this.status;
        data["hideValue"] = this.hideValue;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface ISettingDto {
    userId?: number | undefined;
    value?: string | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;
}

export class TemplateGuidGetDto implements ITemplateGuidGetDto {
    tenantId?: number | undefined;
    userId?: number | undefined;
    id?: string;
    language?: string | undefined;
    option?: string | undefined;
    search?: string | undefined;
    status?: string | undefined;
    from?: Date | undefined;
    to?: Date | undefined;
    sValue?: string[] | undefined;
    lValue?: number[] | undefined;
    gValue?: string[] | undefined;
    dValue?: number[] | undefined;
    tValue?: Date[] | undefined;
    criterias?: CriteriaRequestDto[] | undefined;
    sorting?: string | undefined;
    skipCount?: number;
    maxResultCount?: number;

    constructor(data?: ITemplateGuidGetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.userId = _data["userId"];
            this.id = _data["id"];
            this.language = _data["language"];
            this.option = _data["option"];
            this.search = _data["search"];
            this.status = _data["status"];
            this.from = _data["from"] ? new Date(_data["from"].toString()) : <any>undefined;
            this.to = _data["to"] ? new Date(_data["to"].toString()) : <any>undefined;
            if (Array.isArray(_data["sValue"])) {
                this.sValue = [] as any;
                for (let item of _data["sValue"])
                    this.sValue!.push(item);
            }
            if (Array.isArray(_data["lValue"])) {
                this.lValue = [] as any;
                for (let item of _data["lValue"])
                    this.lValue!.push(item);
            }
            if (Array.isArray(_data["gValue"])) {
                this.gValue = [] as any;
                for (let item of _data["gValue"])
                    this.gValue!.push(item);
            }
            if (Array.isArray(_data["dValue"])) {
                this.dValue = [] as any;
                for (let item of _data["dValue"])
                    this.dValue!.push(item);
            }
            if (Array.isArray(_data["tValue"])) {
                this.tValue = [] as any;
                for (let item of _data["tValue"])
                    this.tValue!.push(new Date(item));
            }
            if (Array.isArray(_data["criterias"])) {
                this.criterias = [] as any;
                for (let item of _data["criterias"])
                    this.criterias!.push(CriteriaRequestDto.fromJS(item));
            }
            this.sorting = _data["sorting"];
            this.skipCount = _data["skipCount"];
            this.maxResultCount = _data["maxResultCount"];
        }
    }

    static fromJS(data: any): TemplateGuidGetDto {
        data = typeof data === 'object' ? data : {};
        let result = new TemplateGuidGetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["id"] = this.id;
        data["language"] = this.language;
        data["option"] = this.option;
        data["search"] = this.search;
        data["status"] = this.status;
        data["from"] = this.from ? this.from.toISOString() : <any>undefined;
        data["to"] = this.to ? this.to.toISOString() : <any>undefined;
        if (Array.isArray(this.sValue)) {
            data["sValue"] = [];
            for (let item of this.sValue)
                data["sValue"].push(item);
        }
        if (Array.isArray(this.lValue)) {
            data["lValue"] = [];
            for (let item of this.lValue)
                data["lValue"].push(item);
        }
        if (Array.isArray(this.gValue)) {
            data["gValue"] = [];
            for (let item of this.gValue)
                data["gValue"].push(item);
        }
        if (Array.isArray(this.dValue)) {
            data["dValue"] = [];
            for (let item of this.dValue)
                data["dValue"].push(item);
        }
        if (Array.isArray(this.tValue)) {
            data["tValue"] = [];
            for (let item of this.tValue)
                data["tValue"].push(item.toISOString());
        }
        if (Array.isArray(this.criterias)) {
            data["criterias"] = [];
            for (let item of this.criterias)
                data["criterias"].push(item.toJSON());
        }
        data["sorting"] = this.sorting;
        data["skipCount"] = this.skipCount;
        data["maxResultCount"] = this.maxResultCount;
        return data;
    }
}

export interface ITemplateGuidGetDto {
    tenantId?: number | undefined;
    userId?: number | undefined;
    id?: string;
    language?: string | undefined;
    option?: string | undefined;
    search?: string | undefined;
    status?: string | undefined;
    from?: Date | undefined;
    to?: Date | undefined;
    sValue?: string[] | undefined;
    lValue?: number[] | undefined;
    gValue?: string[] | undefined;
    dValue?: number[] | undefined;
    tValue?: Date[] | undefined;
    criterias?: CriteriaRequestDto[] | undefined;
    sorting?: string | undefined;
    skipCount?: number;
    maxResultCount?: number;
}

export class TemplateOutputDto implements ITemplateOutputDto {
    files?: string | undefined;
    type?: string | undefined;
    value?: string | undefined;
    userId?: number | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;

    constructor(data?: ITemplateOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.files = _data["files"];
            this.type = _data["type"];
            this.value = _data["value"];
            this.userId = _data["userId"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.codeData = _data["codeData"];
            this.valueData = _data["valueData"];
            this.category = _data["category"];
            this.permissions = _data["permissions"];
            this.language = _data["language"];
            this.tenantId = _data["tenantId"];
            this.status = _data["status"];
            this.hideValue = _data["hideValue"];
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): TemplateOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new TemplateOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["files"] = this.files;
        data["type"] = this.type;
        data["value"] = this.value;
        data["userId"] = this.userId;
        data["name"] = this.name;
        data["code"] = this.code;
        data["codeData"] = this.codeData;
        data["valueData"] = this.valueData;
        data["category"] = this.category;
        data["permissions"] = this.permissions;
        data["language"] = this.language;
        data["tenantId"] = this.tenantId;
        data["status"] = this.status;
        data["hideValue"] = this.hideValue;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface ITemplateOutputDto {
    files?: string | undefined;
    type?: string | undefined;
    value?: string | undefined;
    userId?: number | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;
}

export class TemplateInputDto implements ITemplateInputDto {
    file?: FileDto;
    files?: string | undefined;
    type?: string | undefined;
    value?: string | undefined;
    userId?: number | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;

    constructor(data?: ITemplateInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.file = _data["file"] ? FileDto.fromJS(_data["file"]) : <any>undefined;
            this.files = _data["files"];
            this.type = _data["type"];
            this.value = _data["value"];
            this.userId = _data["userId"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.codeData = _data["codeData"];
            this.valueData = _data["valueData"];
            this.category = _data["category"];
            this.permissions = _data["permissions"];
            this.language = _data["language"];
            this.tenantId = _data["tenantId"];
            this.status = _data["status"];
            this.hideValue = _data["hideValue"];
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): TemplateInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new TemplateInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["file"] = this.file ? this.file.toJSON() : <any>undefined;
        data["files"] = this.files;
        data["type"] = this.type;
        data["value"] = this.value;
        data["userId"] = this.userId;
        data["name"] = this.name;
        data["code"] = this.code;
        data["codeData"] = this.codeData;
        data["valueData"] = this.valueData;
        data["category"] = this.category;
        data["permissions"] = this.permissions;
        data["language"] = this.language;
        data["tenantId"] = this.tenantId;
        data["status"] = this.status;
        data["hideValue"] = this.hideValue;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface ITemplateInputDto {
    file?: FileDto;
    files?: string | undefined;
    type?: string | undefined;
    value?: string | undefined;
    userId?: number | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;
}

export class TemplateCVDKGuidGetDto implements ITemplateCVDKGuidGetDto {
    tenantId?: number | undefined;
    userId?: number | undefined;
    id?: string;
    language?: string | undefined;
    option?: string | undefined;
    search?: string | undefined;
    status?: string | undefined;
    from?: Date | undefined;
    to?: Date | undefined;
    sValue?: string[] | undefined;
    lValue?: number[] | undefined;
    gValue?: string[] | undefined;
    dValue?: number[] | undefined;
    tValue?: Date[] | undefined;
    criterias?: CriteriaRequestDto[] | undefined;
    sorting?: string | undefined;
    skipCount?: number;
    maxResultCount?: number;

    constructor(data?: ITemplateCVDKGuidGetDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"];
            this.userId = _data["userId"];
            this.id = _data["id"];
            this.language = _data["language"];
            this.option = _data["option"];
            this.search = _data["search"];
            this.status = _data["status"];
            this.from = _data["from"] ? new Date(_data["from"].toString()) : <any>undefined;
            this.to = _data["to"] ? new Date(_data["to"].toString()) : <any>undefined;
            if (Array.isArray(_data["sValue"])) {
                this.sValue = [] as any;
                for (let item of _data["sValue"])
                    this.sValue!.push(item);
            }
            if (Array.isArray(_data["lValue"])) {
                this.lValue = [] as any;
                for (let item of _data["lValue"])
                    this.lValue!.push(item);
            }
            if (Array.isArray(_data["gValue"])) {
                this.gValue = [] as any;
                for (let item of _data["gValue"])
                    this.gValue!.push(item);
            }
            if (Array.isArray(_data["dValue"])) {
                this.dValue = [] as any;
                for (let item of _data["dValue"])
                    this.dValue!.push(item);
            }
            if (Array.isArray(_data["tValue"])) {
                this.tValue = [] as any;
                for (let item of _data["tValue"])
                    this.tValue!.push(new Date(item));
            }
            if (Array.isArray(_data["criterias"])) {
                this.criterias = [] as any;
                for (let item of _data["criterias"])
                    this.criterias!.push(CriteriaRequestDto.fromJS(item));
            }
            this.sorting = _data["sorting"];
            this.skipCount = _data["skipCount"];
            this.maxResultCount = _data["maxResultCount"];
        }
    }

    static fromJS(data: any): TemplateCVDKGuidGetDto {
        data = typeof data === 'object' ? data : {};
        let result = new TemplateCVDKGuidGetDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["id"] = this.id;
        data["language"] = this.language;
        data["option"] = this.option;
        data["search"] = this.search;
        data["status"] = this.status;
        data["from"] = this.from ? this.from.toISOString() : <any>undefined;
        data["to"] = this.to ? this.to.toISOString() : <any>undefined;
        if (Array.isArray(this.sValue)) {
            data["sValue"] = [];
            for (let item of this.sValue)
                data["sValue"].push(item);
        }
        if (Array.isArray(this.lValue)) {
            data["lValue"] = [];
            for (let item of this.lValue)
                data["lValue"].push(item);
        }
        if (Array.isArray(this.gValue)) {
            data["gValue"] = [];
            for (let item of this.gValue)
                data["gValue"].push(item);
        }
        if (Array.isArray(this.dValue)) {
            data["dValue"] = [];
            for (let item of this.dValue)
                data["dValue"].push(item);
        }
        if (Array.isArray(this.tValue)) {
            data["tValue"] = [];
            for (let item of this.tValue)
                data["tValue"].push(item.toISOString());
        }
        if (Array.isArray(this.criterias)) {
            data["criterias"] = [];
            for (let item of this.criterias)
                data["criterias"].push(item.toJSON());
        }
        data["sorting"] = this.sorting;
        data["skipCount"] = this.skipCount;
        data["maxResultCount"] = this.maxResultCount;
        return data;
    }
}

export interface ITemplateCVDKGuidGetDto {
    tenantId?: number | undefined;
    userId?: number | undefined;
    id?: string;
    language?: string | undefined;
    option?: string | undefined;
    search?: string | undefined;
    status?: string | undefined;
    from?: Date | undefined;
    to?: Date | undefined;
    sValue?: string[] | undefined;
    lValue?: number[] | undefined;
    gValue?: string[] | undefined;
    dValue?: number[] | undefined;
    tValue?: Date[] | undefined;
    criterias?: CriteriaRequestDto[] | undefined;
    sorting?: string | undefined;
    skipCount?: number;
    maxResultCount?: number;
}

export class OrgDinhKyDto implements IOrgDinhKyDto {
    orgDuyetDinhKy?: InfoDetailUserDto;
    orgXuLyDinhKy?: InfoDetailUserDto;

    constructor(data?: IOrgDinhKyDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.orgDuyetDinhKy = _data["orgDuyetDinhKy"] ? InfoDetailUserDto.fromJS(_data["orgDuyetDinhKy"]) : <any>undefined;
            this.orgXuLyDinhKy = _data["orgXuLyDinhKy"] ? InfoDetailUserDto.fromJS(_data["orgXuLyDinhKy"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OrgDinhKyDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrgDinhKyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orgDuyetDinhKy"] = this.orgDuyetDinhKy ? this.orgDuyetDinhKy.toJSON() : <any>undefined;
        data["orgXuLyDinhKy"] = this.orgXuLyDinhKy ? this.orgXuLyDinhKy.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOrgDinhKyDto {
    orgDuyetDinhKy?: InfoDetailUserDto;
    orgXuLyDinhKy?: InfoDetailUserDto;
}

export class TemplateCVDKOutputDto implements ITemplateCVDKOutputDto {
    parentId?: string | undefined;
    index?: number;
    order?: number;
    groupCode?: string | undefined;
    title!: string;
    doBaoMat?: number;
    doUuTien?: number;
    loaiCongViecId?: string;
    thoiGianThucHien?: number;
    thoiGianHoanThanhThucTe?: number | undefined;
    tongThoiGianChiDinhViecCon?: number | undefined;
    tongThoiGianThucTeViecCon?: number | undefined;
    hanBatDau?: number | undefined;
    hanHoanThanh?: number | undefined;
    giamSat!: InfoDetailUserDto;
    xuLy!: InfoDetailUserDto;
    duyet!: InfoDetailUserDto;
    boPhanTao!: InfoDetailUserDto;
    dataReference?: string | undefined;
    quyTrinhCode?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    content?: string | undefined;
    note?: string | undefined;
    tags?: string | undefined;
    xepLoais?: string | undefined;
    listCongViecLienQuan?: CongViecLienQuanDto[] | undefined;
    listDoiTuongLienQuan?: DoiTuongLienQuanDto[] | undefined;
    listTieuChi?: TieuChiDto[] | undefined;
    listChildren?: CongViecBasicDto[] | undefined;
    listFile?: FileDto[] | undefined;
    isActive?: boolean;
    executes?: string | undefined;
    loaiDinhKy?: string | undefined;
    dayValue?: string | undefined;
    executeDate?: number | undefined;
    stopFrom?: number | undefined;
    stopTo?: number | undefined;
    listOrgDinhKy?: OrgDinhKyDto[] | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;

    constructor(data?: ITemplateCVDKOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.giamSat = new InfoDetailUserDto();
            this.xuLy = new InfoDetailUserDto();
            this.duyet = new InfoDetailUserDto();
            this.boPhanTao = new InfoDetailUserDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.parentId = _data["parentId"];
            this.index = _data["index"];
            this.order = _data["order"];
            this.groupCode = _data["groupCode"];
            this.title = _data["title"];
            this.doBaoMat = _data["doBaoMat"];
            this.doUuTien = _data["doUuTien"];
            this.loaiCongViecId = _data["loaiCongViecId"];
            this.thoiGianThucHien = _data["thoiGianThucHien"];
            this.thoiGianHoanThanhThucTe = _data["thoiGianHoanThanhThucTe"];
            this.tongThoiGianChiDinhViecCon = _data["tongThoiGianChiDinhViecCon"];
            this.tongThoiGianThucTeViecCon = _data["tongThoiGianThucTeViecCon"];
            this.hanBatDau = _data["hanBatDau"];
            this.hanHoanThanh = _data["hanHoanThanh"];
            this.giamSat = _data["giamSat"] ? InfoDetailUserDto.fromJS(_data["giamSat"]) : new InfoDetailUserDto();
            this.xuLy = _data["xuLy"] ? InfoDetailUserDto.fromJS(_data["xuLy"]) : new InfoDetailUserDto();
            this.duyet = _data["duyet"] ? InfoDetailUserDto.fromJS(_data["duyet"]) : new InfoDetailUserDto();
            this.boPhanTao = _data["boPhanTao"] ? InfoDetailUserDto.fromJS(_data["boPhanTao"]) : new InfoDetailUserDto();
            this.dataReference = _data["dataReference"];
            this.quyTrinhCode = _data["quyTrinhCode"];
            this.key = _data["key"];
            this.value = _data["value"];
            this.content = _data["content"];
            this.note = _data["note"];
            this.tags = _data["tags"];
            this.xepLoais = _data["xepLoais"];
            if (Array.isArray(_data["listCongViecLienQuan"])) {
                this.listCongViecLienQuan = [] as any;
                for (let item of _data["listCongViecLienQuan"])
                    this.listCongViecLienQuan!.push(CongViecLienQuanDto.fromJS(item));
            }
            if (Array.isArray(_data["listDoiTuongLienQuan"])) {
                this.listDoiTuongLienQuan = [] as any;
                for (let item of _data["listDoiTuongLienQuan"])
                    this.listDoiTuongLienQuan!.push(DoiTuongLienQuanDto.fromJS(item));
            }
            if (Array.isArray(_data["listTieuChi"])) {
                this.listTieuChi = [] as any;
                for (let item of _data["listTieuChi"])
                    this.listTieuChi!.push(TieuChiDto.fromJS(item));
            }
            if (Array.isArray(_data["listChildren"])) {
                this.listChildren = [] as any;
                for (let item of _data["listChildren"])
                    this.listChildren!.push(CongViecBasicDto.fromJS(item));
            }
            if (Array.isArray(_data["listFile"])) {
                this.listFile = [] as any;
                for (let item of _data["listFile"])
                    this.listFile!.push(FileDto.fromJS(item));
            }
            this.isActive = _data["isActive"];
            this.executes = _data["executes"];
            this.loaiDinhKy = _data["loaiDinhKy"];
            this.dayValue = _data["dayValue"];
            this.executeDate = _data["executeDate"];
            this.stopFrom = _data["stopFrom"];
            this.stopTo = _data["stopTo"];
            if (Array.isArray(_data["listOrgDinhKy"])) {
                this.listOrgDinhKy = [] as any;
                for (let item of _data["listOrgDinhKy"])
                    this.listOrgDinhKy!.push(OrgDinhKyDto.fromJS(item));
            }
            this.value1 = _data["value1"];
            this.value2 = _data["value2"];
            this.value3 = _data["value3"];
            this.value4 = _data["value4"];
            this.value5 = _data["value5"];
            this.value6 = _data["value6"];
            this.value7 = _data["value7"];
            this.value8 = _data["value8"];
            this.value9 = _data["value9"];
            this.value10 = _data["value10"];
            this.number1 = _data["number1"];
            this.number2 = _data["number2"];
            this.number3 = _data["number3"];
            this.number4 = _data["number4"];
            this.number5 = _data["number5"];
            this.number6 = _data["number6"];
            this.number7 = _data["number7"];
            this.number8 = _data["number8"];
            this.number9 = _data["number9"];
            this.number10 = _data["number10"];
            this.bool1 = _data["bool1"];
            this.bool2 = _data["bool2"];
            this.bool3 = _data["bool3"];
            this.bool4 = _data["bool4"];
            this.bool5 = _data["bool5"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.codeData = _data["codeData"];
            this.valueData = _data["valueData"];
            this.category = _data["category"];
            this.permissions = _data["permissions"];
            this.language = _data["language"];
            this.tenantId = _data["tenantId"];
            this.status = _data["status"];
            this.hideValue = _data["hideValue"];
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): TemplateCVDKOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new TemplateCVDKOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["index"] = this.index;
        data["order"] = this.order;
        data["groupCode"] = this.groupCode;
        data["title"] = this.title;
        data["doBaoMat"] = this.doBaoMat;
        data["doUuTien"] = this.doUuTien;
        data["loaiCongViecId"] = this.loaiCongViecId;
        data["thoiGianThucHien"] = this.thoiGianThucHien;
        data["thoiGianHoanThanhThucTe"] = this.thoiGianHoanThanhThucTe;
        data["tongThoiGianChiDinhViecCon"] = this.tongThoiGianChiDinhViecCon;
        data["tongThoiGianThucTeViecCon"] = this.tongThoiGianThucTeViecCon;
        data["hanBatDau"] = this.hanBatDau;
        data["hanHoanThanh"] = this.hanHoanThanh;
        data["giamSat"] = this.giamSat ? this.giamSat.toJSON() : <any>undefined;
        data["xuLy"] = this.xuLy ? this.xuLy.toJSON() : <any>undefined;
        data["duyet"] = this.duyet ? this.duyet.toJSON() : <any>undefined;
        data["boPhanTao"] = this.boPhanTao ? this.boPhanTao.toJSON() : <any>undefined;
        data["dataReference"] = this.dataReference;
        data["quyTrinhCode"] = this.quyTrinhCode;
        data["key"] = this.key;
        data["value"] = this.value;
        data["content"] = this.content;
        data["note"] = this.note;
        data["tags"] = this.tags;
        data["xepLoais"] = this.xepLoais;
        if (Array.isArray(this.listCongViecLienQuan)) {
            data["listCongViecLienQuan"] = [];
            for (let item of this.listCongViecLienQuan)
                data["listCongViecLienQuan"].push(item.toJSON());
        }
        if (Array.isArray(this.listDoiTuongLienQuan)) {
            data["listDoiTuongLienQuan"] = [];
            for (let item of this.listDoiTuongLienQuan)
                data["listDoiTuongLienQuan"].push(item.toJSON());
        }
        if (Array.isArray(this.listTieuChi)) {
            data["listTieuChi"] = [];
            for (let item of this.listTieuChi)
                data["listTieuChi"].push(item.toJSON());
        }
        if (Array.isArray(this.listChildren)) {
            data["listChildren"] = [];
            for (let item of this.listChildren)
                data["listChildren"].push(item.toJSON());
        }
        if (Array.isArray(this.listFile)) {
            data["listFile"] = [];
            for (let item of this.listFile)
                data["listFile"].push(item.toJSON());
        }
        data["isActive"] = this.isActive;
        data["executes"] = this.executes;
        data["loaiDinhKy"] = this.loaiDinhKy;
        data["dayValue"] = this.dayValue;
        data["executeDate"] = this.executeDate;
        data["stopFrom"] = this.stopFrom;
        data["stopTo"] = this.stopTo;
        if (Array.isArray(this.listOrgDinhKy)) {
            data["listOrgDinhKy"] = [];
            for (let item of this.listOrgDinhKy)
                data["listOrgDinhKy"].push(item.toJSON());
        }
        data["value1"] = this.value1;
        data["value2"] = this.value2;
        data["value3"] = this.value3;
        data["value4"] = this.value4;
        data["value5"] = this.value5;
        data["value6"] = this.value6;
        data["value7"] = this.value7;
        data["value8"] = this.value8;
        data["value9"] = this.value9;
        data["value10"] = this.value10;
        data["number1"] = this.number1;
        data["number2"] = this.number2;
        data["number3"] = this.number3;
        data["number4"] = this.number4;
        data["number5"] = this.number5;
        data["number6"] = this.number6;
        data["number7"] = this.number7;
        data["number8"] = this.number8;
        data["number9"] = this.number9;
        data["number10"] = this.number10;
        data["bool1"] = this.bool1;
        data["bool2"] = this.bool2;
        data["bool3"] = this.bool3;
        data["bool4"] = this.bool4;
        data["bool5"] = this.bool5;
        data["name"] = this.name;
        data["code"] = this.code;
        data["codeData"] = this.codeData;
        data["valueData"] = this.valueData;
        data["category"] = this.category;
        data["permissions"] = this.permissions;
        data["language"] = this.language;
        data["tenantId"] = this.tenantId;
        data["status"] = this.status;
        data["hideValue"] = this.hideValue;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface ITemplateCVDKOutputDto {
    parentId?: string | undefined;
    index?: number;
    order?: number;
    groupCode?: string | undefined;
    title: string;
    doBaoMat?: number;
    doUuTien?: number;
    loaiCongViecId?: string;
    thoiGianThucHien?: number;
    thoiGianHoanThanhThucTe?: number | undefined;
    tongThoiGianChiDinhViecCon?: number | undefined;
    tongThoiGianThucTeViecCon?: number | undefined;
    hanBatDau?: number | undefined;
    hanHoanThanh?: number | undefined;
    giamSat: InfoDetailUserDto;
    xuLy: InfoDetailUserDto;
    duyet: InfoDetailUserDto;
    boPhanTao: InfoDetailUserDto;
    dataReference?: string | undefined;
    quyTrinhCode?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    content?: string | undefined;
    note?: string | undefined;
    tags?: string | undefined;
    xepLoais?: string | undefined;
    listCongViecLienQuan?: CongViecLienQuanDto[] | undefined;
    listDoiTuongLienQuan?: DoiTuongLienQuanDto[] | undefined;
    listTieuChi?: TieuChiDto[] | undefined;
    listChildren?: CongViecBasicDto[] | undefined;
    listFile?: FileDto[] | undefined;
    isActive?: boolean;
    executes?: string | undefined;
    loaiDinhKy?: string | undefined;
    dayValue?: string | undefined;
    executeDate?: number | undefined;
    stopFrom?: number | undefined;
    stopTo?: number | undefined;
    listOrgDinhKy?: OrgDinhKyDto[] | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;
}

export class TemplateCVDKOutputDtoPagedResultDto implements ITemplateCVDKOutputDtoPagedResultDto {
    totalCount?: number;
    items?: TemplateCVDKOutputDto[] | undefined;

    constructor(data?: ITemplateCVDKOutputDtoPagedResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TemplateCVDKOutputDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TemplateCVDKOutputDtoPagedResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new TemplateCVDKOutputDtoPagedResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITemplateCVDKOutputDtoPagedResultDto {
    totalCount?: number;
    items?: TemplateCVDKOutputDto[] | undefined;
}

export class TemplateCVDKInputDto implements ITemplateCVDKInputDto {
    shareKey?: ShareKeyDto;
    parentId?: string | undefined;
    index?: number;
    order?: number;
    groupCode?: string | undefined;
    title!: string;
    doBaoMat?: number;
    doUuTien?: number;
    loaiCongViecId?: string;
    thoiGianThucHien?: number;
    thoiGianHoanThanhThucTe?: number | undefined;
    tongThoiGianChiDinhViecCon?: number | undefined;
    tongThoiGianThucTeViecCon?: number | undefined;
    hanBatDau?: number | undefined;
    hanHoanThanh?: number | undefined;
    giamSat!: InfoDetailUserDto;
    xuLy!: InfoDetailUserDto;
    duyet!: InfoDetailUserDto;
    boPhanTao!: InfoDetailUserDto;
    dataReference?: string | undefined;
    quyTrinhCode?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    content?: string | undefined;
    note?: string | undefined;
    tags?: string | undefined;
    xepLoais?: string | undefined;
    listCongViecLienQuan?: CongViecLienQuanDto[] | undefined;
    listDoiTuongLienQuan?: DoiTuongLienQuanDto[] | undefined;
    listTieuChi?: TieuChiDto[] | undefined;
    listChildren?: CongViecBasicDto[] | undefined;
    listFile?: FileDto[] | undefined;
    isActive?: boolean;
    executes?: string | undefined;
    loaiDinhKy?: string | undefined;
    dayValue?: string | undefined;
    executeDate?: number | undefined;
    stopFrom?: number | undefined;
    stopTo?: number | undefined;
    listOrgDinhKy?: OrgDinhKyDto[] | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;

    constructor(data?: ITemplateCVDKInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.giamSat = new InfoDetailUserDto();
            this.xuLy = new InfoDetailUserDto();
            this.duyet = new InfoDetailUserDto();
            this.boPhanTao = new InfoDetailUserDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shareKey = _data["shareKey"] ? ShareKeyDto.fromJS(_data["shareKey"]) : <any>undefined;
            this.parentId = _data["parentId"];
            this.index = _data["index"];
            this.order = _data["order"];
            this.groupCode = _data["groupCode"];
            this.title = _data["title"];
            this.doBaoMat = _data["doBaoMat"];
            this.doUuTien = _data["doUuTien"];
            this.loaiCongViecId = _data["loaiCongViecId"];
            this.thoiGianThucHien = _data["thoiGianThucHien"];
            this.thoiGianHoanThanhThucTe = _data["thoiGianHoanThanhThucTe"];
            this.tongThoiGianChiDinhViecCon = _data["tongThoiGianChiDinhViecCon"];
            this.tongThoiGianThucTeViecCon = _data["tongThoiGianThucTeViecCon"];
            this.hanBatDau = _data["hanBatDau"];
            this.hanHoanThanh = _data["hanHoanThanh"];
            this.giamSat = _data["giamSat"] ? InfoDetailUserDto.fromJS(_data["giamSat"]) : new InfoDetailUserDto();
            this.xuLy = _data["xuLy"] ? InfoDetailUserDto.fromJS(_data["xuLy"]) : new InfoDetailUserDto();
            this.duyet = _data["duyet"] ? InfoDetailUserDto.fromJS(_data["duyet"]) : new InfoDetailUserDto();
            this.boPhanTao = _data["boPhanTao"] ? InfoDetailUserDto.fromJS(_data["boPhanTao"]) : new InfoDetailUserDto();
            this.dataReference = _data["dataReference"];
            this.quyTrinhCode = _data["quyTrinhCode"];
            this.key = _data["key"];
            this.value = _data["value"];
            this.content = _data["content"];
            this.note = _data["note"];
            this.tags = _data["tags"];
            this.xepLoais = _data["xepLoais"];
            if (Array.isArray(_data["listCongViecLienQuan"])) {
                this.listCongViecLienQuan = [] as any;
                for (let item of _data["listCongViecLienQuan"])
                    this.listCongViecLienQuan!.push(CongViecLienQuanDto.fromJS(item));
            }
            if (Array.isArray(_data["listDoiTuongLienQuan"])) {
                this.listDoiTuongLienQuan = [] as any;
                for (let item of _data["listDoiTuongLienQuan"])
                    this.listDoiTuongLienQuan!.push(DoiTuongLienQuanDto.fromJS(item));
            }
            if (Array.isArray(_data["listTieuChi"])) {
                this.listTieuChi = [] as any;
                for (let item of _data["listTieuChi"])
                    this.listTieuChi!.push(TieuChiDto.fromJS(item));
            }
            if (Array.isArray(_data["listChildren"])) {
                this.listChildren = [] as any;
                for (let item of _data["listChildren"])
                    this.listChildren!.push(CongViecBasicDto.fromJS(item));
            }
            if (Array.isArray(_data["listFile"])) {
                this.listFile = [] as any;
                for (let item of _data["listFile"])
                    this.listFile!.push(FileDto.fromJS(item));
            }
            this.isActive = _data["isActive"];
            this.executes = _data["executes"];
            this.loaiDinhKy = _data["loaiDinhKy"];
            this.dayValue = _data["dayValue"];
            this.executeDate = _data["executeDate"];
            this.stopFrom = _data["stopFrom"];
            this.stopTo = _data["stopTo"];
            if (Array.isArray(_data["listOrgDinhKy"])) {
                this.listOrgDinhKy = [] as any;
                for (let item of _data["listOrgDinhKy"])
                    this.listOrgDinhKy!.push(OrgDinhKyDto.fromJS(item));
            }
            this.value1 = _data["value1"];
            this.value2 = _data["value2"];
            this.value3 = _data["value3"];
            this.value4 = _data["value4"];
            this.value5 = _data["value5"];
            this.value6 = _data["value6"];
            this.value7 = _data["value7"];
            this.value8 = _data["value8"];
            this.value9 = _data["value9"];
            this.value10 = _data["value10"];
            this.number1 = _data["number1"];
            this.number2 = _data["number2"];
            this.number3 = _data["number3"];
            this.number4 = _data["number4"];
            this.number5 = _data["number5"];
            this.number6 = _data["number6"];
            this.number7 = _data["number7"];
            this.number8 = _data["number8"];
            this.number9 = _data["number9"];
            this.number10 = _data["number10"];
            this.bool1 = _data["bool1"];
            this.bool2 = _data["bool2"];
            this.bool3 = _data["bool3"];
            this.bool4 = _data["bool4"];
            this.bool5 = _data["bool5"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.codeData = _data["codeData"];
            this.valueData = _data["valueData"];
            this.category = _data["category"];
            this.permissions = _data["permissions"];
            this.language = _data["language"];
            this.tenantId = _data["tenantId"];
            this.status = _data["status"];
            this.hideValue = _data["hideValue"];
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): TemplateCVDKInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new TemplateCVDKInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shareKey"] = this.shareKey ? this.shareKey.toJSON() : <any>undefined;
        data["parentId"] = this.parentId;
        data["index"] = this.index;
        data["order"] = this.order;
        data["groupCode"] = this.groupCode;
        data["title"] = this.title;
        data["doBaoMat"] = this.doBaoMat;
        data["doUuTien"] = this.doUuTien;
        data["loaiCongViecId"] = this.loaiCongViecId;
        data["thoiGianThucHien"] = this.thoiGianThucHien;
        data["thoiGianHoanThanhThucTe"] = this.thoiGianHoanThanhThucTe;
        data["tongThoiGianChiDinhViecCon"] = this.tongThoiGianChiDinhViecCon;
        data["tongThoiGianThucTeViecCon"] = this.tongThoiGianThucTeViecCon;
        data["hanBatDau"] = this.hanBatDau;
        data["hanHoanThanh"] = this.hanHoanThanh;
        data["giamSat"] = this.giamSat ? this.giamSat.toJSON() : <any>undefined;
        data["xuLy"] = this.xuLy ? this.xuLy.toJSON() : <any>undefined;
        data["duyet"] = this.duyet ? this.duyet.toJSON() : <any>undefined;
        data["boPhanTao"] = this.boPhanTao ? this.boPhanTao.toJSON() : <any>undefined;
        data["dataReference"] = this.dataReference;
        data["quyTrinhCode"] = this.quyTrinhCode;
        data["key"] = this.key;
        data["value"] = this.value;
        data["content"] = this.content;
        data["note"] = this.note;
        data["tags"] = this.tags;
        data["xepLoais"] = this.xepLoais;
        if (Array.isArray(this.listCongViecLienQuan)) {
            data["listCongViecLienQuan"] = [];
            for (let item of this.listCongViecLienQuan)
                data["listCongViecLienQuan"].push(item.toJSON());
        }
        if (Array.isArray(this.listDoiTuongLienQuan)) {
            data["listDoiTuongLienQuan"] = [];
            for (let item of this.listDoiTuongLienQuan)
                data["listDoiTuongLienQuan"].push(item.toJSON());
        }
        if (Array.isArray(this.listTieuChi)) {
            data["listTieuChi"] = [];
            for (let item of this.listTieuChi)
                data["listTieuChi"].push(item.toJSON());
        }
        if (Array.isArray(this.listChildren)) {
            data["listChildren"] = [];
            for (let item of this.listChildren)
                data["listChildren"].push(item.toJSON());
        }
        if (Array.isArray(this.listFile)) {
            data["listFile"] = [];
            for (let item of this.listFile)
                data["listFile"].push(item.toJSON());
        }
        data["isActive"] = this.isActive;
        data["executes"] = this.executes;
        data["loaiDinhKy"] = this.loaiDinhKy;
        data["dayValue"] = this.dayValue;
        data["executeDate"] = this.executeDate;
        data["stopFrom"] = this.stopFrom;
        data["stopTo"] = this.stopTo;
        if (Array.isArray(this.listOrgDinhKy)) {
            data["listOrgDinhKy"] = [];
            for (let item of this.listOrgDinhKy)
                data["listOrgDinhKy"].push(item.toJSON());
        }
        data["value1"] = this.value1;
        data["value2"] = this.value2;
        data["value3"] = this.value3;
        data["value4"] = this.value4;
        data["value5"] = this.value5;
        data["value6"] = this.value6;
        data["value7"] = this.value7;
        data["value8"] = this.value8;
        data["value9"] = this.value9;
        data["value10"] = this.value10;
        data["number1"] = this.number1;
        data["number2"] = this.number2;
        data["number3"] = this.number3;
        data["number4"] = this.number4;
        data["number5"] = this.number5;
        data["number6"] = this.number6;
        data["number7"] = this.number7;
        data["number8"] = this.number8;
        data["number9"] = this.number9;
        data["number10"] = this.number10;
        data["bool1"] = this.bool1;
        data["bool2"] = this.bool2;
        data["bool3"] = this.bool3;
        data["bool4"] = this.bool4;
        data["bool5"] = this.bool5;
        data["name"] = this.name;
        data["code"] = this.code;
        data["codeData"] = this.codeData;
        data["valueData"] = this.valueData;
        data["category"] = this.category;
        data["permissions"] = this.permissions;
        data["language"] = this.language;
        data["tenantId"] = this.tenantId;
        data["status"] = this.status;
        data["hideValue"] = this.hideValue;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface ITemplateCVDKInputDto {
    shareKey?: ShareKeyDto;
    parentId?: string | undefined;
    index?: number;
    order?: number;
    groupCode?: string | undefined;
    title: string;
    doBaoMat?: number;
    doUuTien?: number;
    loaiCongViecId?: string;
    thoiGianThucHien?: number;
    thoiGianHoanThanhThucTe?: number | undefined;
    tongThoiGianChiDinhViecCon?: number | undefined;
    tongThoiGianThucTeViecCon?: number | undefined;
    hanBatDau?: number | undefined;
    hanHoanThanh?: number | undefined;
    giamSat: InfoDetailUserDto;
    xuLy: InfoDetailUserDto;
    duyet: InfoDetailUserDto;
    boPhanTao: InfoDetailUserDto;
    dataReference?: string | undefined;
    quyTrinhCode?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    content?: string | undefined;
    note?: string | undefined;
    tags?: string | undefined;
    xepLoais?: string | undefined;
    listCongViecLienQuan?: CongViecLienQuanDto[] | undefined;
    listDoiTuongLienQuan?: DoiTuongLienQuanDto[] | undefined;
    listTieuChi?: TieuChiDto[] | undefined;
    listChildren?: CongViecBasicDto[] | undefined;
    listFile?: FileDto[] | undefined;
    isActive?: boolean;
    executes?: string | undefined;
    loaiDinhKy?: string | undefined;
    dayValue?: string | undefined;
    executeDate?: number | undefined;
    stopFrom?: number | undefined;
    stopTo?: number | undefined;
    listOrgDinhKy?: OrgDinhKyDto[] | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;
}

export class DeleteTemplateCVDKDto implements IDeleteTemplateCVDKDto {
    shareKey?: ShareKeyDto;
    id?: string;

    constructor(data?: IDeleteTemplateCVDKDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shareKey = _data["shareKey"] ? ShareKeyDto.fromJS(_data["shareKey"]) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DeleteTemplateCVDKDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteTemplateCVDKDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shareKey"] = this.shareKey ? this.shareKey.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IDeleteTemplateCVDKDto {
    shareKey?: ShareKeyDto;
    id?: string;
}

export class ThongBaoLienQuanDto implements IThongBaoLienQuanDto {
    loaiLienQuan?: string | undefined;
    title!: string;
    loaiThongBaoId!: string;
    ngayBatDau!: number;
    ngayKetThuc!: number;
    duyet!: InfoDetailUserDto;
    boPhanTao!: InfoDetailUserDto;
    status?: string | undefined;
    id?: string;

    constructor(data?: IThongBaoLienQuanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.duyet = new InfoDetailUserDto();
            this.boPhanTao = new InfoDetailUserDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.loaiLienQuan = _data["loaiLienQuan"];
            this.title = _data["title"];
            this.loaiThongBaoId = _data["loaiThongBaoId"];
            this.ngayBatDau = _data["ngayBatDau"];
            this.ngayKetThuc = _data["ngayKetThuc"];
            this.duyet = _data["duyet"] ? InfoDetailUserDto.fromJS(_data["duyet"]) : new InfoDetailUserDto();
            this.boPhanTao = _data["boPhanTao"] ? InfoDetailUserDto.fromJS(_data["boPhanTao"]) : new InfoDetailUserDto();
            this.status = _data["status"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ThongBaoLienQuanDto {
        data = typeof data === 'object' ? data : {};
        let result = new ThongBaoLienQuanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["loaiLienQuan"] = this.loaiLienQuan;
        data["title"] = this.title;
        data["loaiThongBaoId"] = this.loaiThongBaoId;
        data["ngayBatDau"] = this.ngayBatDau;
        data["ngayKetThuc"] = this.ngayKetThuc;
        data["duyet"] = this.duyet ? this.duyet.toJSON() : <any>undefined;
        data["boPhanTao"] = this.boPhanTao ? this.boPhanTao.toJSON() : <any>undefined;
        data["status"] = this.status;
        data["id"] = this.id;
        return data;
    }
}

export interface IThongBaoLienQuanDto {
    loaiLienQuan?: string | undefined;
    title: string;
    loaiThongBaoId: string;
    ngayBatDau: number;
    ngayKetThuc: number;
    duyet: InfoDetailUserDto;
    boPhanTao: InfoDetailUserDto;
    status?: string | undefined;
    id?: string;
}

export class ThongBaoOutputDto implements IThongBaoOutputDto {
    loaiThongBaoName?: string | undefined;
    listDuyet?: InfoDetailUserDto[] | undefined;
    listPermission?: string[] | undefined;
    shareKey?: ShareKeyDto;
    title!: string;
    loaiThongBaoId!: string;
    ngayBatDau!: number;
    ngayKetThuc!: number;
    doUuTien?: number;
    content?: string | undefined;
    duyet!: InfoDetailUserDto;
    boPhanTao!: InfoDetailUserDto;
    listFile?: FileDto[] | undefined;
    listDoiTuongLienQuan?: DoiTuongLienQuanDto[] | undefined;
    listThongBaoLienQuan?: ThongBaoLienQuanDto[] | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;

    constructor(data?: IThongBaoOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.duyet = new InfoDetailUserDto();
            this.boPhanTao = new InfoDetailUserDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.loaiThongBaoName = _data["loaiThongBaoName"];
            if (Array.isArray(_data["listDuyet"])) {
                this.listDuyet = [] as any;
                for (let item of _data["listDuyet"])
                    this.listDuyet!.push(InfoDetailUserDto.fromJS(item));
            }
            if (Array.isArray(_data["listPermission"])) {
                this.listPermission = [] as any;
                for (let item of _data["listPermission"])
                    this.listPermission!.push(item);
            }
            this.shareKey = _data["shareKey"] ? ShareKeyDto.fromJS(_data["shareKey"]) : <any>undefined;
            this.title = _data["title"];
            this.loaiThongBaoId = _data["loaiThongBaoId"];
            this.ngayBatDau = _data["ngayBatDau"];
            this.ngayKetThuc = _data["ngayKetThuc"];
            this.doUuTien = _data["doUuTien"];
            this.content = _data["content"];
            this.duyet = _data["duyet"] ? InfoDetailUserDto.fromJS(_data["duyet"]) : new InfoDetailUserDto();
            this.boPhanTao = _data["boPhanTao"] ? InfoDetailUserDto.fromJS(_data["boPhanTao"]) : new InfoDetailUserDto();
            if (Array.isArray(_data["listFile"])) {
                this.listFile = [] as any;
                for (let item of _data["listFile"])
                    this.listFile!.push(FileDto.fromJS(item));
            }
            if (Array.isArray(_data["listDoiTuongLienQuan"])) {
                this.listDoiTuongLienQuan = [] as any;
                for (let item of _data["listDoiTuongLienQuan"])
                    this.listDoiTuongLienQuan!.push(DoiTuongLienQuanDto.fromJS(item));
            }
            if (Array.isArray(_data["listThongBaoLienQuan"])) {
                this.listThongBaoLienQuan = [] as any;
                for (let item of _data["listThongBaoLienQuan"])
                    this.listThongBaoLienQuan!.push(ThongBaoLienQuanDto.fromJS(item));
            }
            this.value1 = _data["value1"];
            this.value2 = _data["value2"];
            this.value3 = _data["value3"];
            this.value4 = _data["value4"];
            this.value5 = _data["value5"];
            this.value6 = _data["value6"];
            this.value7 = _data["value7"];
            this.value8 = _data["value8"];
            this.value9 = _data["value9"];
            this.value10 = _data["value10"];
            this.number1 = _data["number1"];
            this.number2 = _data["number2"];
            this.number3 = _data["number3"];
            this.number4 = _data["number4"];
            this.number5 = _data["number5"];
            this.number6 = _data["number6"];
            this.number7 = _data["number7"];
            this.number8 = _data["number8"];
            this.number9 = _data["number9"];
            this.number10 = _data["number10"];
            this.bool1 = _data["bool1"];
            this.bool2 = _data["bool2"];
            this.bool3 = _data["bool3"];
            this.bool4 = _data["bool4"];
            this.bool5 = _data["bool5"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.codeData = _data["codeData"];
            this.valueData = _data["valueData"];
            this.category = _data["category"];
            this.permissions = _data["permissions"];
            this.language = _data["language"];
            this.tenantId = _data["tenantId"];
            this.status = _data["status"];
            this.hideValue = _data["hideValue"];
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ThongBaoOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ThongBaoOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["loaiThongBaoName"] = this.loaiThongBaoName;
        if (Array.isArray(this.listDuyet)) {
            data["listDuyet"] = [];
            for (let item of this.listDuyet)
                data["listDuyet"].push(item.toJSON());
        }
        if (Array.isArray(this.listPermission)) {
            data["listPermission"] = [];
            for (let item of this.listPermission)
                data["listPermission"].push(item);
        }
        data["shareKey"] = this.shareKey ? this.shareKey.toJSON() : <any>undefined;
        data["title"] = this.title;
        data["loaiThongBaoId"] = this.loaiThongBaoId;
        data["ngayBatDau"] = this.ngayBatDau;
        data["ngayKetThuc"] = this.ngayKetThuc;
        data["doUuTien"] = this.doUuTien;
        data["content"] = this.content;
        data["duyet"] = this.duyet ? this.duyet.toJSON() : <any>undefined;
        data["boPhanTao"] = this.boPhanTao ? this.boPhanTao.toJSON() : <any>undefined;
        if (Array.isArray(this.listFile)) {
            data["listFile"] = [];
            for (let item of this.listFile)
                data["listFile"].push(item.toJSON());
        }
        if (Array.isArray(this.listDoiTuongLienQuan)) {
            data["listDoiTuongLienQuan"] = [];
            for (let item of this.listDoiTuongLienQuan)
                data["listDoiTuongLienQuan"].push(item.toJSON());
        }
        if (Array.isArray(this.listThongBaoLienQuan)) {
            data["listThongBaoLienQuan"] = [];
            for (let item of this.listThongBaoLienQuan)
                data["listThongBaoLienQuan"].push(item.toJSON());
        }
        data["value1"] = this.value1;
        data["value2"] = this.value2;
        data["value3"] = this.value3;
        data["value4"] = this.value4;
        data["value5"] = this.value5;
        data["value6"] = this.value6;
        data["value7"] = this.value7;
        data["value8"] = this.value8;
        data["value9"] = this.value9;
        data["value10"] = this.value10;
        data["number1"] = this.number1;
        data["number2"] = this.number2;
        data["number3"] = this.number3;
        data["number4"] = this.number4;
        data["number5"] = this.number5;
        data["number6"] = this.number6;
        data["number7"] = this.number7;
        data["number8"] = this.number8;
        data["number9"] = this.number9;
        data["number10"] = this.number10;
        data["bool1"] = this.bool1;
        data["bool2"] = this.bool2;
        data["bool3"] = this.bool3;
        data["bool4"] = this.bool4;
        data["bool5"] = this.bool5;
        data["name"] = this.name;
        data["code"] = this.code;
        data["codeData"] = this.codeData;
        data["valueData"] = this.valueData;
        data["category"] = this.category;
        data["permissions"] = this.permissions;
        data["language"] = this.language;
        data["tenantId"] = this.tenantId;
        data["status"] = this.status;
        data["hideValue"] = this.hideValue;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IThongBaoOutputDto {
    loaiThongBaoName?: string | undefined;
    listDuyet?: InfoDetailUserDto[] | undefined;
    listPermission?: string[] | undefined;
    shareKey?: ShareKeyDto;
    title: string;
    loaiThongBaoId: string;
    ngayBatDau: number;
    ngayKetThuc: number;
    doUuTien?: number;
    content?: string | undefined;
    duyet: InfoDetailUserDto;
    boPhanTao: InfoDetailUserDto;
    listFile?: FileDto[] | undefined;
    listDoiTuongLienQuan?: DoiTuongLienQuanDto[] | undefined;
    listThongBaoLienQuan?: ThongBaoLienQuanDto[] | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;
}

export class ThongBaoInputDto implements IThongBaoInputDto {
    shareKey?: ShareKeyDto;
    title!: string;
    loaiThongBaoId!: string;
    ngayBatDau!: number;
    ngayKetThuc!: number;
    doUuTien?: number;
    content?: string | undefined;
    duyet!: InfoDetailUserDto;
    boPhanTao!: InfoDetailUserDto;
    listFile?: FileDto[] | undefined;
    listDoiTuongLienQuan?: DoiTuongLienQuanDto[] | undefined;
    listThongBaoLienQuan?: ThongBaoLienQuanDto[] | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;

    constructor(data?: IThongBaoInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.duyet = new InfoDetailUserDto();
            this.boPhanTao = new InfoDetailUserDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shareKey = _data["shareKey"] ? ShareKeyDto.fromJS(_data["shareKey"]) : <any>undefined;
            this.title = _data["title"];
            this.loaiThongBaoId = _data["loaiThongBaoId"];
            this.ngayBatDau = _data["ngayBatDau"];
            this.ngayKetThuc = _data["ngayKetThuc"];
            this.doUuTien = _data["doUuTien"];
            this.content = _data["content"];
            this.duyet = _data["duyet"] ? InfoDetailUserDto.fromJS(_data["duyet"]) : new InfoDetailUserDto();
            this.boPhanTao = _data["boPhanTao"] ? InfoDetailUserDto.fromJS(_data["boPhanTao"]) : new InfoDetailUserDto();
            if (Array.isArray(_data["listFile"])) {
                this.listFile = [] as any;
                for (let item of _data["listFile"])
                    this.listFile!.push(FileDto.fromJS(item));
            }
            if (Array.isArray(_data["listDoiTuongLienQuan"])) {
                this.listDoiTuongLienQuan = [] as any;
                for (let item of _data["listDoiTuongLienQuan"])
                    this.listDoiTuongLienQuan!.push(DoiTuongLienQuanDto.fromJS(item));
            }
            if (Array.isArray(_data["listThongBaoLienQuan"])) {
                this.listThongBaoLienQuan = [] as any;
                for (let item of _data["listThongBaoLienQuan"])
                    this.listThongBaoLienQuan!.push(ThongBaoLienQuanDto.fromJS(item));
            }
            this.value1 = _data["value1"];
            this.value2 = _data["value2"];
            this.value3 = _data["value3"];
            this.value4 = _data["value4"];
            this.value5 = _data["value5"];
            this.value6 = _data["value6"];
            this.value7 = _data["value7"];
            this.value8 = _data["value8"];
            this.value9 = _data["value9"];
            this.value10 = _data["value10"];
            this.number1 = _data["number1"];
            this.number2 = _data["number2"];
            this.number3 = _data["number3"];
            this.number4 = _data["number4"];
            this.number5 = _data["number5"];
            this.number6 = _data["number6"];
            this.number7 = _data["number7"];
            this.number8 = _data["number8"];
            this.number9 = _data["number9"];
            this.number10 = _data["number10"];
            this.bool1 = _data["bool1"];
            this.bool2 = _data["bool2"];
            this.bool3 = _data["bool3"];
            this.bool4 = _data["bool4"];
            this.bool5 = _data["bool5"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.codeData = _data["codeData"];
            this.valueData = _data["valueData"];
            this.category = _data["category"];
            this.permissions = _data["permissions"];
            this.language = _data["language"];
            this.tenantId = _data["tenantId"];
            this.status = _data["status"];
            this.hideValue = _data["hideValue"];
            this.creatorUserId = _data["creatorUserId"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ThongBaoInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ThongBaoInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shareKey"] = this.shareKey ? this.shareKey.toJSON() : <any>undefined;
        data["title"] = this.title;
        data["loaiThongBaoId"] = this.loaiThongBaoId;
        data["ngayBatDau"] = this.ngayBatDau;
        data["ngayKetThuc"] = this.ngayKetThuc;
        data["doUuTien"] = this.doUuTien;
        data["content"] = this.content;
        data["duyet"] = this.duyet ? this.duyet.toJSON() : <any>undefined;
        data["boPhanTao"] = this.boPhanTao ? this.boPhanTao.toJSON() : <any>undefined;
        if (Array.isArray(this.listFile)) {
            data["listFile"] = [];
            for (let item of this.listFile)
                data["listFile"].push(item.toJSON());
        }
        if (Array.isArray(this.listDoiTuongLienQuan)) {
            data["listDoiTuongLienQuan"] = [];
            for (let item of this.listDoiTuongLienQuan)
                data["listDoiTuongLienQuan"].push(item.toJSON());
        }
        if (Array.isArray(this.listThongBaoLienQuan)) {
            data["listThongBaoLienQuan"] = [];
            for (let item of this.listThongBaoLienQuan)
                data["listThongBaoLienQuan"].push(item.toJSON());
        }
        data["value1"] = this.value1;
        data["value2"] = this.value2;
        data["value3"] = this.value3;
        data["value4"] = this.value4;
        data["value5"] = this.value5;
        data["value6"] = this.value6;
        data["value7"] = this.value7;
        data["value8"] = this.value8;
        data["value9"] = this.value9;
        data["value10"] = this.value10;
        data["number1"] = this.number1;
        data["number2"] = this.number2;
        data["number3"] = this.number3;
        data["number4"] = this.number4;
        data["number5"] = this.number5;
        data["number6"] = this.number6;
        data["number7"] = this.number7;
        data["number8"] = this.number8;
        data["number9"] = this.number9;
        data["number10"] = this.number10;
        data["bool1"] = this.bool1;
        data["bool2"] = this.bool2;
        data["bool3"] = this.bool3;
        data["bool4"] = this.bool4;
        data["bool5"] = this.bool5;
        data["name"] = this.name;
        data["code"] = this.code;
        data["codeData"] = this.codeData;
        data["valueData"] = this.valueData;
        data["category"] = this.category;
        data["permissions"] = this.permissions;
        data["language"] = this.language;
        data["tenantId"] = this.tenantId;
        data["status"] = this.status;
        data["hideValue"] = this.hideValue;
        data["creatorUserId"] = this.creatorUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data;
    }
}

export interface IThongBaoInputDto {
    shareKey?: ShareKeyDto;
    title: string;
    loaiThongBaoId: string;
    ngayBatDau: number;
    ngayKetThuc: number;
    doUuTien?: number;
    content?: string | undefined;
    duyet: InfoDetailUserDto;
    boPhanTao: InfoDetailUserDto;
    listFile?: FileDto[] | undefined;
    listDoiTuongLienQuan?: DoiTuongLienQuanDto[] | undefined;
    listThongBaoLienQuan?: ThongBaoLienQuanDto[] | undefined;
    value1?: string | undefined;
    value2?: string | undefined;
    value3?: string | undefined;
    value4?: string | undefined;
    value5?: string | undefined;
    value6?: string | undefined;
    value7?: string | undefined;
    value8?: string | undefined;
    value9?: string | undefined;
    value10?: string | undefined;
    number1?: number;
    number2?: number;
    number3?: number;
    number4?: number;
    number5?: number;
    number6?: number;
    number7?: number;
    number8?: number;
    number9?: number;
    number10?: number;
    bool1?: boolean | undefined;
    bool2?: boolean | undefined;
    bool3?: boolean | undefined;
    bool4?: boolean | undefined;
    bool5?: boolean | undefined;
    name?: string | undefined;
    code?: string | undefined;
    codeData?: string | undefined;
    valueData?: string | undefined;
    category?: string | undefined;
    permissions?: string | undefined;
    language?: string | undefined;
    tenantId?: number | undefined;
    status?: string | undefined;
    hideValue?: string | undefined;
    creatorUserId?: number | undefined;
    creationTime?: Date;
    id?: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}